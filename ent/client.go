// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"tsdb-ent-example/ent/migrate"

	"tsdb-ent-example/ent/attributekv"
	"tsdb-ent-example/ent/sensor"
	"tsdb-ent-example/ent/sensordata"
	"tsdb-ent-example/ent/tskv"
	"tsdb-ent-example/ent/tskvdictionary"
	"tsdb-ent-example/ent/tskvlatest"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AttributeKV is the client for interacting with the AttributeKV builders.
	AttributeKV *AttributeKVClient
	// Sensor is the client for interacting with the Sensor builders.
	Sensor *SensorClient
	// SensorData is the client for interacting with the SensorData builders.
	SensorData *SensorDataClient
	// TsKv is the client for interacting with the TsKv builders.
	TsKv *TsKvClient
	// TsKvDictionary is the client for interacting with the TsKvDictionary builders.
	TsKvDictionary *TsKvDictionaryClient
	// TsKvLatest is the client for interacting with the TsKvLatest builders.
	TsKvLatest *TsKvLatestClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AttributeKV = NewAttributeKVClient(c.config)
	c.Sensor = NewSensorClient(c.config)
	c.SensorData = NewSensorDataClient(c.config)
	c.TsKv = NewTsKvClient(c.config)
	c.TsKvDictionary = NewTsKvDictionaryClient(c.config)
	c.TsKvLatest = NewTsKvLatestClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		AttributeKV:    NewAttributeKVClient(cfg),
		Sensor:         NewSensorClient(cfg),
		SensorData:     NewSensorDataClient(cfg),
		TsKv:           NewTsKvClient(cfg),
		TsKvDictionary: NewTsKvDictionaryClient(cfg),
		TsKvLatest:     NewTsKvLatestClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		AttributeKV:    NewAttributeKVClient(cfg),
		Sensor:         NewSensorClient(cfg),
		SensorData:     NewSensorDataClient(cfg),
		TsKv:           NewTsKvClient(cfg),
		TsKvDictionary: NewTsKvDictionaryClient(cfg),
		TsKvLatest:     NewTsKvLatestClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AttributeKV.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AttributeKV.Use(hooks...)
	c.Sensor.Use(hooks...)
	c.SensorData.Use(hooks...)
	c.TsKv.Use(hooks...)
	c.TsKvDictionary.Use(hooks...)
	c.TsKvLatest.Use(hooks...)
}

// AttributeKVClient is a client for the AttributeKV schema.
type AttributeKVClient struct {
	config
}

// NewAttributeKVClient returns a client for the AttributeKV from the given config.
func NewAttributeKVClient(c config) *AttributeKVClient {
	return &AttributeKVClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attributekv.Hooks(f(g(h())))`.
func (c *AttributeKVClient) Use(hooks ...Hook) {
	c.hooks.AttributeKV = append(c.hooks.AttributeKV, hooks...)
}

// Create returns a create builder for AttributeKV.
func (c *AttributeKVClient) Create() *AttributeKVCreate {
	mutation := newAttributeKVMutation(c.config, OpCreate)
	return &AttributeKVCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AttributeKV entities.
func (c *AttributeKVClient) CreateBulk(builders ...*AttributeKVCreate) *AttributeKVCreateBulk {
	return &AttributeKVCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AttributeKV.
func (c *AttributeKVClient) Update() *AttributeKVUpdate {
	mutation := newAttributeKVMutation(c.config, OpUpdate)
	return &AttributeKVUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttributeKVClient) UpdateOne(ak *AttributeKV) *AttributeKVUpdateOne {
	mutation := newAttributeKVMutation(c.config, OpUpdateOne, withAttributeKV(ak))
	return &AttributeKVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttributeKVClient) UpdateOneID(id int) *AttributeKVUpdateOne {
	mutation := newAttributeKVMutation(c.config, OpUpdateOne, withAttributeKVID(id))
	return &AttributeKVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AttributeKV.
func (c *AttributeKVClient) Delete() *AttributeKVDelete {
	mutation := newAttributeKVMutation(c.config, OpDelete)
	return &AttributeKVDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AttributeKVClient) DeleteOne(ak *AttributeKV) *AttributeKVDeleteOne {
	return c.DeleteOneID(ak.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AttributeKVClient) DeleteOneID(id int) *AttributeKVDeleteOne {
	builder := c.Delete().Where(attributekv.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttributeKVDeleteOne{builder}
}

// Query returns a query builder for AttributeKV.
func (c *AttributeKVClient) Query() *AttributeKVQuery {
	return &AttributeKVQuery{
		config: c.config,
	}
}

// Get returns a AttributeKV entity by its id.
func (c *AttributeKVClient) Get(ctx context.Context, id int) (*AttributeKV, error) {
	return c.Query().Where(attributekv.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttributeKVClient) GetX(ctx context.Context, id int) *AttributeKV {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AttributeKVClient) Hooks() []Hook {
	return c.hooks.AttributeKV
}

// SensorClient is a client for the Sensor schema.
type SensorClient struct {
	config
}

// NewSensorClient returns a client for the Sensor from the given config.
func NewSensorClient(c config) *SensorClient {
	return &SensorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sensor.Hooks(f(g(h())))`.
func (c *SensorClient) Use(hooks ...Hook) {
	c.hooks.Sensor = append(c.hooks.Sensor, hooks...)
}

// Create returns a create builder for Sensor.
func (c *SensorClient) Create() *SensorCreate {
	mutation := newSensorMutation(c.config, OpCreate)
	return &SensorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sensor entities.
func (c *SensorClient) CreateBulk(builders ...*SensorCreate) *SensorCreateBulk {
	return &SensorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sensor.
func (c *SensorClient) Update() *SensorUpdate {
	mutation := newSensorMutation(c.config, OpUpdate)
	return &SensorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SensorClient) UpdateOne(s *Sensor) *SensorUpdateOne {
	mutation := newSensorMutation(c.config, OpUpdateOne, withSensor(s))
	return &SensorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SensorClient) UpdateOneID(id int) *SensorUpdateOne {
	mutation := newSensorMutation(c.config, OpUpdateOne, withSensorID(id))
	return &SensorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sensor.
func (c *SensorClient) Delete() *SensorDelete {
	mutation := newSensorMutation(c.config, OpDelete)
	return &SensorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SensorClient) DeleteOne(s *Sensor) *SensorDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SensorClient) DeleteOneID(id int) *SensorDeleteOne {
	builder := c.Delete().Where(sensor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SensorDeleteOne{builder}
}

// Query returns a query builder for Sensor.
func (c *SensorClient) Query() *SensorQuery {
	return &SensorQuery{
		config: c.config,
	}
}

// Get returns a Sensor entity by its id.
func (c *SensorClient) Get(ctx context.Context, id int) (*Sensor, error) {
	return c.Query().Where(sensor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SensorClient) GetX(ctx context.Context, id int) *Sensor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SensorClient) Hooks() []Hook {
	return c.hooks.Sensor
}

// SensorDataClient is a client for the SensorData schema.
type SensorDataClient struct {
	config
}

// NewSensorDataClient returns a client for the SensorData from the given config.
func NewSensorDataClient(c config) *SensorDataClient {
	return &SensorDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sensordata.Hooks(f(g(h())))`.
func (c *SensorDataClient) Use(hooks ...Hook) {
	c.hooks.SensorData = append(c.hooks.SensorData, hooks...)
}

// Create returns a create builder for SensorData.
func (c *SensorDataClient) Create() *SensorDataCreate {
	mutation := newSensorDataMutation(c.config, OpCreate)
	return &SensorDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SensorData entities.
func (c *SensorDataClient) CreateBulk(builders ...*SensorDataCreate) *SensorDataCreateBulk {
	return &SensorDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SensorData.
func (c *SensorDataClient) Update() *SensorDataUpdate {
	mutation := newSensorDataMutation(c.config, OpUpdate)
	return &SensorDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SensorDataClient) UpdateOne(sd *SensorData) *SensorDataUpdateOne {
	mutation := newSensorDataMutation(c.config, OpUpdateOne, withSensorData(sd))
	return &SensorDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SensorDataClient) UpdateOneID(id int) *SensorDataUpdateOne {
	mutation := newSensorDataMutation(c.config, OpUpdateOne, withSensorDataID(id))
	return &SensorDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SensorData.
func (c *SensorDataClient) Delete() *SensorDataDelete {
	mutation := newSensorDataMutation(c.config, OpDelete)
	return &SensorDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SensorDataClient) DeleteOne(sd *SensorData) *SensorDataDeleteOne {
	return c.DeleteOneID(sd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SensorDataClient) DeleteOneID(id int) *SensorDataDeleteOne {
	builder := c.Delete().Where(sensordata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SensorDataDeleteOne{builder}
}

// Query returns a query builder for SensorData.
func (c *SensorDataClient) Query() *SensorDataQuery {
	return &SensorDataQuery{
		config: c.config,
	}
}

// Get returns a SensorData entity by its id.
func (c *SensorDataClient) Get(ctx context.Context, id int) (*SensorData, error) {
	return c.Query().Where(sensordata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SensorDataClient) GetX(ctx context.Context, id int) *SensorData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SensorDataClient) Hooks() []Hook {
	return c.hooks.SensorData
}

// TsKvClient is a client for the TsKv schema.
type TsKvClient struct {
	config
}

// NewTsKvClient returns a client for the TsKv from the given config.
func NewTsKvClient(c config) *TsKvClient {
	return &TsKvClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tskv.Hooks(f(g(h())))`.
func (c *TsKvClient) Use(hooks ...Hook) {
	c.hooks.TsKv = append(c.hooks.TsKv, hooks...)
}

// Create returns a create builder for TsKv.
func (c *TsKvClient) Create() *TsKvCreate {
	mutation := newTsKvMutation(c.config, OpCreate)
	return &TsKvCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TsKv entities.
func (c *TsKvClient) CreateBulk(builders ...*TsKvCreate) *TsKvCreateBulk {
	return &TsKvCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TsKv.
func (c *TsKvClient) Update() *TsKvUpdate {
	mutation := newTsKvMutation(c.config, OpUpdate)
	return &TsKvUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TsKvClient) UpdateOne(tk *TsKv) *TsKvUpdateOne {
	mutation := newTsKvMutation(c.config, OpUpdateOne, withTsKv(tk))
	return &TsKvUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TsKvClient) UpdateOneID(id int) *TsKvUpdateOne {
	mutation := newTsKvMutation(c.config, OpUpdateOne, withTsKvID(id))
	return &TsKvUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TsKv.
func (c *TsKvClient) Delete() *TsKvDelete {
	mutation := newTsKvMutation(c.config, OpDelete)
	return &TsKvDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TsKvClient) DeleteOne(tk *TsKv) *TsKvDeleteOne {
	return c.DeleteOneID(tk.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TsKvClient) DeleteOneID(id int) *TsKvDeleteOne {
	builder := c.Delete().Where(tskv.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TsKvDeleteOne{builder}
}

// Query returns a query builder for TsKv.
func (c *TsKvClient) Query() *TsKvQuery {
	return &TsKvQuery{
		config: c.config,
	}
}

// Get returns a TsKv entity by its id.
func (c *TsKvClient) Get(ctx context.Context, id int) (*TsKv, error) {
	return c.Query().Where(tskv.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TsKvClient) GetX(ctx context.Context, id int) *TsKv {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TsKvClient) Hooks() []Hook {
	return c.hooks.TsKv
}

// TsKvDictionaryClient is a client for the TsKvDictionary schema.
type TsKvDictionaryClient struct {
	config
}

// NewTsKvDictionaryClient returns a client for the TsKvDictionary from the given config.
func NewTsKvDictionaryClient(c config) *TsKvDictionaryClient {
	return &TsKvDictionaryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tskvdictionary.Hooks(f(g(h())))`.
func (c *TsKvDictionaryClient) Use(hooks ...Hook) {
	c.hooks.TsKvDictionary = append(c.hooks.TsKvDictionary, hooks...)
}

// Create returns a create builder for TsKvDictionary.
func (c *TsKvDictionaryClient) Create() *TsKvDictionaryCreate {
	mutation := newTsKvDictionaryMutation(c.config, OpCreate)
	return &TsKvDictionaryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TsKvDictionary entities.
func (c *TsKvDictionaryClient) CreateBulk(builders ...*TsKvDictionaryCreate) *TsKvDictionaryCreateBulk {
	return &TsKvDictionaryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TsKvDictionary.
func (c *TsKvDictionaryClient) Update() *TsKvDictionaryUpdate {
	mutation := newTsKvDictionaryMutation(c.config, OpUpdate)
	return &TsKvDictionaryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TsKvDictionaryClient) UpdateOne(tkd *TsKvDictionary) *TsKvDictionaryUpdateOne {
	mutation := newTsKvDictionaryMutation(c.config, OpUpdateOne, withTsKvDictionary(tkd))
	return &TsKvDictionaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TsKvDictionaryClient) UpdateOneID(id int) *TsKvDictionaryUpdateOne {
	mutation := newTsKvDictionaryMutation(c.config, OpUpdateOne, withTsKvDictionaryID(id))
	return &TsKvDictionaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TsKvDictionary.
func (c *TsKvDictionaryClient) Delete() *TsKvDictionaryDelete {
	mutation := newTsKvDictionaryMutation(c.config, OpDelete)
	return &TsKvDictionaryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TsKvDictionaryClient) DeleteOne(tkd *TsKvDictionary) *TsKvDictionaryDeleteOne {
	return c.DeleteOneID(tkd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TsKvDictionaryClient) DeleteOneID(id int) *TsKvDictionaryDeleteOne {
	builder := c.Delete().Where(tskvdictionary.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TsKvDictionaryDeleteOne{builder}
}

// Query returns a query builder for TsKvDictionary.
func (c *TsKvDictionaryClient) Query() *TsKvDictionaryQuery {
	return &TsKvDictionaryQuery{
		config: c.config,
	}
}

// Get returns a TsKvDictionary entity by its id.
func (c *TsKvDictionaryClient) Get(ctx context.Context, id int) (*TsKvDictionary, error) {
	return c.Query().Where(tskvdictionary.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TsKvDictionaryClient) GetX(ctx context.Context, id int) *TsKvDictionary {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TsKvDictionaryClient) Hooks() []Hook {
	return c.hooks.TsKvDictionary
}

// TsKvLatestClient is a client for the TsKvLatest schema.
type TsKvLatestClient struct {
	config
}

// NewTsKvLatestClient returns a client for the TsKvLatest from the given config.
func NewTsKvLatestClient(c config) *TsKvLatestClient {
	return &TsKvLatestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tskvlatest.Hooks(f(g(h())))`.
func (c *TsKvLatestClient) Use(hooks ...Hook) {
	c.hooks.TsKvLatest = append(c.hooks.TsKvLatest, hooks...)
}

// Create returns a create builder for TsKvLatest.
func (c *TsKvLatestClient) Create() *TsKvLatestCreate {
	mutation := newTsKvLatestMutation(c.config, OpCreate)
	return &TsKvLatestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TsKvLatest entities.
func (c *TsKvLatestClient) CreateBulk(builders ...*TsKvLatestCreate) *TsKvLatestCreateBulk {
	return &TsKvLatestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TsKvLatest.
func (c *TsKvLatestClient) Update() *TsKvLatestUpdate {
	mutation := newTsKvLatestMutation(c.config, OpUpdate)
	return &TsKvLatestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TsKvLatestClient) UpdateOne(tkl *TsKvLatest) *TsKvLatestUpdateOne {
	mutation := newTsKvLatestMutation(c.config, OpUpdateOne, withTsKvLatest(tkl))
	return &TsKvLatestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TsKvLatestClient) UpdateOneID(id int) *TsKvLatestUpdateOne {
	mutation := newTsKvLatestMutation(c.config, OpUpdateOne, withTsKvLatestID(id))
	return &TsKvLatestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TsKvLatest.
func (c *TsKvLatestClient) Delete() *TsKvLatestDelete {
	mutation := newTsKvLatestMutation(c.config, OpDelete)
	return &TsKvLatestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TsKvLatestClient) DeleteOne(tkl *TsKvLatest) *TsKvLatestDeleteOne {
	return c.DeleteOneID(tkl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TsKvLatestClient) DeleteOneID(id int) *TsKvLatestDeleteOne {
	builder := c.Delete().Where(tskvlatest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TsKvLatestDeleteOne{builder}
}

// Query returns a query builder for TsKvLatest.
func (c *TsKvLatestClient) Query() *TsKvLatestQuery {
	return &TsKvLatestQuery{
		config: c.config,
	}
}

// Get returns a TsKvLatest entity by its id.
func (c *TsKvLatestClient) Get(ctx context.Context, id int) (*TsKvLatest, error) {
	return c.Query().Where(tskvlatest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TsKvLatestClient) GetX(ctx context.Context, id int) *TsKvLatest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TsKvLatestClient) Hooks() []Hook {
	return c.hooks.TsKvLatest
}
