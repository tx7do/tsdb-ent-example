// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tsdb-ent-example/ent/predicate"
	"tsdb-ent-example/ent/tskvdictionary"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TsKvDictionaryUpdate is the builder for updating TsKvDictionary entities.
type TsKvDictionaryUpdate struct {
	config
	hooks    []Hook
	mutation *TsKvDictionaryMutation
}

// Where appends a list predicates to the TsKvDictionaryUpdate builder.
func (tkdu *TsKvDictionaryUpdate) Where(ps ...predicate.TsKvDictionary) *TsKvDictionaryUpdate {
	tkdu.mutation.Where(ps...)
	return tkdu
}

// SetKey sets the "key" field.
func (tkdu *TsKvDictionaryUpdate) SetKey(s string) *TsKvDictionaryUpdate {
	tkdu.mutation.SetKey(s)
	return tkdu
}

// Mutation returns the TsKvDictionaryMutation object of the builder.
func (tkdu *TsKvDictionaryUpdate) Mutation() *TsKvDictionaryMutation {
	return tkdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tkdu *TsKvDictionaryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tkdu.hooks) == 0 {
		if err = tkdu.check(); err != nil {
			return 0, err
		}
		affected, err = tkdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TsKvDictionaryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tkdu.check(); err != nil {
				return 0, err
			}
			tkdu.mutation = mutation
			affected, err = tkdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tkdu.hooks) - 1; i >= 0; i-- {
			if tkdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tkdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tkdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tkdu *TsKvDictionaryUpdate) SaveX(ctx context.Context) int {
	affected, err := tkdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tkdu *TsKvDictionaryUpdate) Exec(ctx context.Context) error {
	_, err := tkdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tkdu *TsKvDictionaryUpdate) ExecX(ctx context.Context) {
	if err := tkdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tkdu *TsKvDictionaryUpdate) check() error {
	if v, ok := tkdu.mutation.Key(); ok {
		if err := tskvdictionary.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "TsKvDictionary.key": %w`, err)}
		}
	}
	return nil
}

func (tkdu *TsKvDictionaryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tskvdictionary.Table,
			Columns: tskvdictionary.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tskvdictionary.FieldID,
			},
		},
	}
	if ps := tkdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tkdu.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tskvdictionary.FieldKey,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tkdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tskvdictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TsKvDictionaryUpdateOne is the builder for updating a single TsKvDictionary entity.
type TsKvDictionaryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TsKvDictionaryMutation
}

// SetKey sets the "key" field.
func (tkduo *TsKvDictionaryUpdateOne) SetKey(s string) *TsKvDictionaryUpdateOne {
	tkduo.mutation.SetKey(s)
	return tkduo
}

// Mutation returns the TsKvDictionaryMutation object of the builder.
func (tkduo *TsKvDictionaryUpdateOne) Mutation() *TsKvDictionaryMutation {
	return tkduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tkduo *TsKvDictionaryUpdateOne) Select(field string, fields ...string) *TsKvDictionaryUpdateOne {
	tkduo.fields = append([]string{field}, fields...)
	return tkduo
}

// Save executes the query and returns the updated TsKvDictionary entity.
func (tkduo *TsKvDictionaryUpdateOne) Save(ctx context.Context) (*TsKvDictionary, error) {
	var (
		err  error
		node *TsKvDictionary
	)
	if len(tkduo.hooks) == 0 {
		if err = tkduo.check(); err != nil {
			return nil, err
		}
		node, err = tkduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TsKvDictionaryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tkduo.check(); err != nil {
				return nil, err
			}
			tkduo.mutation = mutation
			node, err = tkduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tkduo.hooks) - 1; i >= 0; i-- {
			if tkduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tkduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tkduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tkduo *TsKvDictionaryUpdateOne) SaveX(ctx context.Context) *TsKvDictionary {
	node, err := tkduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tkduo *TsKvDictionaryUpdateOne) Exec(ctx context.Context) error {
	_, err := tkduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tkduo *TsKvDictionaryUpdateOne) ExecX(ctx context.Context) {
	if err := tkduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tkduo *TsKvDictionaryUpdateOne) check() error {
	if v, ok := tkduo.mutation.Key(); ok {
		if err := tskvdictionary.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "TsKvDictionary.key": %w`, err)}
		}
	}
	return nil
}

func (tkduo *TsKvDictionaryUpdateOne) sqlSave(ctx context.Context) (_node *TsKvDictionary, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tskvdictionary.Table,
			Columns: tskvdictionary.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tskvdictionary.FieldID,
			},
		},
	}
	id, ok := tkduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TsKvDictionary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tkduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tskvdictionary.FieldID)
		for _, f := range fields {
			if !tskvdictionary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tskvdictionary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tkduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tkduo.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tskvdictionary.FieldKey,
		})
	}
	_node = &TsKvDictionary{config: tkduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tkduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tskvdictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
