// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tsdb-ent-example/ent/attributekv"
	"tsdb-ent-example/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AttributeKVUpdate is the builder for updating AttributeKV entities.
type AttributeKVUpdate struct {
	config
	hooks    []Hook
	mutation *AttributeKVMutation
}

// Where appends a list predicates to the AttributeKVUpdate builder.
func (aku *AttributeKVUpdate) Where(ps ...predicate.AttributeKV) *AttributeKVUpdate {
	aku.mutation.Where(ps...)
	return aku
}

// SetEntityType sets the "entity_type" field.
func (aku *AttributeKVUpdate) SetEntityType(s string) *AttributeKVUpdate {
	aku.mutation.SetEntityType(s)
	return aku
}

// SetEntityID sets the "entity_id" field.
func (aku *AttributeKVUpdate) SetEntityID(u uuid.UUID) *AttributeKVUpdate {
	aku.mutation.SetEntityID(u)
	return aku
}

// SetAttributeType sets the "attribute_type" field.
func (aku *AttributeKVUpdate) SetAttributeType(s string) *AttributeKVUpdate {
	aku.mutation.SetAttributeType(s)
	return aku
}

// SetAttributeKey sets the "attribute_key" field.
func (aku *AttributeKVUpdate) SetAttributeKey(s string) *AttributeKVUpdate {
	aku.mutation.SetAttributeKey(s)
	return aku
}

// SetBoolV sets the "bool_v" field.
func (aku *AttributeKVUpdate) SetBoolV(b bool) *AttributeKVUpdate {
	aku.mutation.SetBoolV(b)
	return aku
}

// SetNillableBoolV sets the "bool_v" field if the given value is not nil.
func (aku *AttributeKVUpdate) SetNillableBoolV(b *bool) *AttributeKVUpdate {
	if b != nil {
		aku.SetBoolV(*b)
	}
	return aku
}

// ClearBoolV clears the value of the "bool_v" field.
func (aku *AttributeKVUpdate) ClearBoolV() *AttributeKVUpdate {
	aku.mutation.ClearBoolV()
	return aku
}

// SetStrV sets the "str_v" field.
func (aku *AttributeKVUpdate) SetStrV(s string) *AttributeKVUpdate {
	aku.mutation.SetStrV(s)
	return aku
}

// SetNillableStrV sets the "str_v" field if the given value is not nil.
func (aku *AttributeKVUpdate) SetNillableStrV(s *string) *AttributeKVUpdate {
	if s != nil {
		aku.SetStrV(*s)
	}
	return aku
}

// ClearStrV clears the value of the "str_v" field.
func (aku *AttributeKVUpdate) ClearStrV() *AttributeKVUpdate {
	aku.mutation.ClearStrV()
	return aku
}

// SetLongV sets the "long_v" field.
func (aku *AttributeKVUpdate) SetLongV(i int64) *AttributeKVUpdate {
	aku.mutation.ResetLongV()
	aku.mutation.SetLongV(i)
	return aku
}

// SetNillableLongV sets the "long_v" field if the given value is not nil.
func (aku *AttributeKVUpdate) SetNillableLongV(i *int64) *AttributeKVUpdate {
	if i != nil {
		aku.SetLongV(*i)
	}
	return aku
}

// AddLongV adds i to the "long_v" field.
func (aku *AttributeKVUpdate) AddLongV(i int64) *AttributeKVUpdate {
	aku.mutation.AddLongV(i)
	return aku
}

// ClearLongV clears the value of the "long_v" field.
func (aku *AttributeKVUpdate) ClearLongV() *AttributeKVUpdate {
	aku.mutation.ClearLongV()
	return aku
}

// SetDblV sets the "dbl_v" field.
func (aku *AttributeKVUpdate) SetDblV(f float64) *AttributeKVUpdate {
	aku.mutation.ResetDblV()
	aku.mutation.SetDblV(f)
	return aku
}

// SetNillableDblV sets the "dbl_v" field if the given value is not nil.
func (aku *AttributeKVUpdate) SetNillableDblV(f *float64) *AttributeKVUpdate {
	if f != nil {
		aku.SetDblV(*f)
	}
	return aku
}

// AddDblV adds f to the "dbl_v" field.
func (aku *AttributeKVUpdate) AddDblV(f float64) *AttributeKVUpdate {
	aku.mutation.AddDblV(f)
	return aku
}

// ClearDblV clears the value of the "dbl_v" field.
func (aku *AttributeKVUpdate) ClearDblV() *AttributeKVUpdate {
	aku.mutation.ClearDblV()
	return aku
}

// SetJSONV sets the "json_v" field.
func (aku *AttributeKVUpdate) SetJSONV(s string) *AttributeKVUpdate {
	aku.mutation.SetJSONV(s)
	return aku
}

// SetNillableJSONV sets the "json_v" field if the given value is not nil.
func (aku *AttributeKVUpdate) SetNillableJSONV(s *string) *AttributeKVUpdate {
	if s != nil {
		aku.SetJSONV(*s)
	}
	return aku
}

// ClearJSONV clears the value of the "json_v" field.
func (aku *AttributeKVUpdate) ClearJSONV() *AttributeKVUpdate {
	aku.mutation.ClearJSONV()
	return aku
}

// SetLastUpdateTs sets the "last_update_ts" field.
func (aku *AttributeKVUpdate) SetLastUpdateTs(i int64) *AttributeKVUpdate {
	aku.mutation.ResetLastUpdateTs()
	aku.mutation.SetLastUpdateTs(i)
	return aku
}

// AddLastUpdateTs adds i to the "last_update_ts" field.
func (aku *AttributeKVUpdate) AddLastUpdateTs(i int64) *AttributeKVUpdate {
	aku.mutation.AddLastUpdateTs(i)
	return aku
}

// Mutation returns the AttributeKVMutation object of the builder.
func (aku *AttributeKVUpdate) Mutation() *AttributeKVMutation {
	return aku.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aku *AttributeKVUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aku.hooks) == 0 {
		if err = aku.check(); err != nil {
			return 0, err
		}
		affected, err = aku.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttributeKVMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aku.check(); err != nil {
				return 0, err
			}
			aku.mutation = mutation
			affected, err = aku.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aku.hooks) - 1; i >= 0; i-- {
			if aku.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aku.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aku.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aku *AttributeKVUpdate) SaveX(ctx context.Context) int {
	affected, err := aku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aku *AttributeKVUpdate) Exec(ctx context.Context) error {
	_, err := aku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aku *AttributeKVUpdate) ExecX(ctx context.Context) {
	if err := aku.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aku *AttributeKVUpdate) check() error {
	if v, ok := aku.mutation.EntityType(); ok {
		if err := attributekv.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "AttributeKV.entity_type": %w`, err)}
		}
	}
	if v, ok := aku.mutation.AttributeType(); ok {
		if err := attributekv.AttributeTypeValidator(v); err != nil {
			return &ValidationError{Name: "attribute_type", err: fmt.Errorf(`ent: validator failed for field "AttributeKV.attribute_type": %w`, err)}
		}
	}
	if v, ok := aku.mutation.AttributeKey(); ok {
		if err := attributekv.AttributeKeyValidator(v); err != nil {
			return &ValidationError{Name: "attribute_key", err: fmt.Errorf(`ent: validator failed for field "AttributeKV.attribute_key": %w`, err)}
		}
	}
	if v, ok := aku.mutation.StrV(); ok {
		if err := attributekv.StrVValidator(v); err != nil {
			return &ValidationError{Name: "str_v", err: fmt.Errorf(`ent: validator failed for field "AttributeKV.str_v": %w`, err)}
		}
	}
	return nil
}

func (aku *AttributeKVUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attributekv.Table,
			Columns: attributekv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: attributekv.FieldID,
			},
		},
	}
	if ps := aku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aku.mutation.EntityType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attributekv.FieldEntityType,
		})
	}
	if value, ok := aku.mutation.EntityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: attributekv.FieldEntityID,
		})
	}
	if value, ok := aku.mutation.AttributeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attributekv.FieldAttributeType,
		})
	}
	if value, ok := aku.mutation.AttributeKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attributekv.FieldAttributeKey,
		})
	}
	if value, ok := aku.mutation.BoolV(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: attributekv.FieldBoolV,
		})
	}
	if aku.mutation.BoolVCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: attributekv.FieldBoolV,
		})
	}
	if value, ok := aku.mutation.StrV(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attributekv.FieldStrV,
		})
	}
	if aku.mutation.StrVCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: attributekv.FieldStrV,
		})
	}
	if value, ok := aku.mutation.LongV(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: attributekv.FieldLongV,
		})
	}
	if value, ok := aku.mutation.AddedLongV(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: attributekv.FieldLongV,
		})
	}
	if aku.mutation.LongVCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: attributekv.FieldLongV,
		})
	}
	if value, ok := aku.mutation.DblV(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attributekv.FieldDblV,
		})
	}
	if value, ok := aku.mutation.AddedDblV(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attributekv.FieldDblV,
		})
	}
	if aku.mutation.DblVCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: attributekv.FieldDblV,
		})
	}
	if value, ok := aku.mutation.JSONV(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attributekv.FieldJSONV,
		})
	}
	if aku.mutation.JSONVCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: attributekv.FieldJSONV,
		})
	}
	if value, ok := aku.mutation.LastUpdateTs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: attributekv.FieldLastUpdateTs,
		})
	}
	if value, ok := aku.mutation.AddedLastUpdateTs(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: attributekv.FieldLastUpdateTs,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributekv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AttributeKVUpdateOne is the builder for updating a single AttributeKV entity.
type AttributeKVUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttributeKVMutation
}

// SetEntityType sets the "entity_type" field.
func (akuo *AttributeKVUpdateOne) SetEntityType(s string) *AttributeKVUpdateOne {
	akuo.mutation.SetEntityType(s)
	return akuo
}

// SetEntityID sets the "entity_id" field.
func (akuo *AttributeKVUpdateOne) SetEntityID(u uuid.UUID) *AttributeKVUpdateOne {
	akuo.mutation.SetEntityID(u)
	return akuo
}

// SetAttributeType sets the "attribute_type" field.
func (akuo *AttributeKVUpdateOne) SetAttributeType(s string) *AttributeKVUpdateOne {
	akuo.mutation.SetAttributeType(s)
	return akuo
}

// SetAttributeKey sets the "attribute_key" field.
func (akuo *AttributeKVUpdateOne) SetAttributeKey(s string) *AttributeKVUpdateOne {
	akuo.mutation.SetAttributeKey(s)
	return akuo
}

// SetBoolV sets the "bool_v" field.
func (akuo *AttributeKVUpdateOne) SetBoolV(b bool) *AttributeKVUpdateOne {
	akuo.mutation.SetBoolV(b)
	return akuo
}

// SetNillableBoolV sets the "bool_v" field if the given value is not nil.
func (akuo *AttributeKVUpdateOne) SetNillableBoolV(b *bool) *AttributeKVUpdateOne {
	if b != nil {
		akuo.SetBoolV(*b)
	}
	return akuo
}

// ClearBoolV clears the value of the "bool_v" field.
func (akuo *AttributeKVUpdateOne) ClearBoolV() *AttributeKVUpdateOne {
	akuo.mutation.ClearBoolV()
	return akuo
}

// SetStrV sets the "str_v" field.
func (akuo *AttributeKVUpdateOne) SetStrV(s string) *AttributeKVUpdateOne {
	akuo.mutation.SetStrV(s)
	return akuo
}

// SetNillableStrV sets the "str_v" field if the given value is not nil.
func (akuo *AttributeKVUpdateOne) SetNillableStrV(s *string) *AttributeKVUpdateOne {
	if s != nil {
		akuo.SetStrV(*s)
	}
	return akuo
}

// ClearStrV clears the value of the "str_v" field.
func (akuo *AttributeKVUpdateOne) ClearStrV() *AttributeKVUpdateOne {
	akuo.mutation.ClearStrV()
	return akuo
}

// SetLongV sets the "long_v" field.
func (akuo *AttributeKVUpdateOne) SetLongV(i int64) *AttributeKVUpdateOne {
	akuo.mutation.ResetLongV()
	akuo.mutation.SetLongV(i)
	return akuo
}

// SetNillableLongV sets the "long_v" field if the given value is not nil.
func (akuo *AttributeKVUpdateOne) SetNillableLongV(i *int64) *AttributeKVUpdateOne {
	if i != nil {
		akuo.SetLongV(*i)
	}
	return akuo
}

// AddLongV adds i to the "long_v" field.
func (akuo *AttributeKVUpdateOne) AddLongV(i int64) *AttributeKVUpdateOne {
	akuo.mutation.AddLongV(i)
	return akuo
}

// ClearLongV clears the value of the "long_v" field.
func (akuo *AttributeKVUpdateOne) ClearLongV() *AttributeKVUpdateOne {
	akuo.mutation.ClearLongV()
	return akuo
}

// SetDblV sets the "dbl_v" field.
func (akuo *AttributeKVUpdateOne) SetDblV(f float64) *AttributeKVUpdateOne {
	akuo.mutation.ResetDblV()
	akuo.mutation.SetDblV(f)
	return akuo
}

// SetNillableDblV sets the "dbl_v" field if the given value is not nil.
func (akuo *AttributeKVUpdateOne) SetNillableDblV(f *float64) *AttributeKVUpdateOne {
	if f != nil {
		akuo.SetDblV(*f)
	}
	return akuo
}

// AddDblV adds f to the "dbl_v" field.
func (akuo *AttributeKVUpdateOne) AddDblV(f float64) *AttributeKVUpdateOne {
	akuo.mutation.AddDblV(f)
	return akuo
}

// ClearDblV clears the value of the "dbl_v" field.
func (akuo *AttributeKVUpdateOne) ClearDblV() *AttributeKVUpdateOne {
	akuo.mutation.ClearDblV()
	return akuo
}

// SetJSONV sets the "json_v" field.
func (akuo *AttributeKVUpdateOne) SetJSONV(s string) *AttributeKVUpdateOne {
	akuo.mutation.SetJSONV(s)
	return akuo
}

// SetNillableJSONV sets the "json_v" field if the given value is not nil.
func (akuo *AttributeKVUpdateOne) SetNillableJSONV(s *string) *AttributeKVUpdateOne {
	if s != nil {
		akuo.SetJSONV(*s)
	}
	return akuo
}

// ClearJSONV clears the value of the "json_v" field.
func (akuo *AttributeKVUpdateOne) ClearJSONV() *AttributeKVUpdateOne {
	akuo.mutation.ClearJSONV()
	return akuo
}

// SetLastUpdateTs sets the "last_update_ts" field.
func (akuo *AttributeKVUpdateOne) SetLastUpdateTs(i int64) *AttributeKVUpdateOne {
	akuo.mutation.ResetLastUpdateTs()
	akuo.mutation.SetLastUpdateTs(i)
	return akuo
}

// AddLastUpdateTs adds i to the "last_update_ts" field.
func (akuo *AttributeKVUpdateOne) AddLastUpdateTs(i int64) *AttributeKVUpdateOne {
	akuo.mutation.AddLastUpdateTs(i)
	return akuo
}

// Mutation returns the AttributeKVMutation object of the builder.
func (akuo *AttributeKVUpdateOne) Mutation() *AttributeKVMutation {
	return akuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (akuo *AttributeKVUpdateOne) Select(field string, fields ...string) *AttributeKVUpdateOne {
	akuo.fields = append([]string{field}, fields...)
	return akuo
}

// Save executes the query and returns the updated AttributeKV entity.
func (akuo *AttributeKVUpdateOne) Save(ctx context.Context) (*AttributeKV, error) {
	var (
		err  error
		node *AttributeKV
	)
	if len(akuo.hooks) == 0 {
		if err = akuo.check(); err != nil {
			return nil, err
		}
		node, err = akuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttributeKVMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = akuo.check(); err != nil {
				return nil, err
			}
			akuo.mutation = mutation
			node, err = akuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(akuo.hooks) - 1; i >= 0; i-- {
			if akuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = akuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, akuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (akuo *AttributeKVUpdateOne) SaveX(ctx context.Context) *AttributeKV {
	node, err := akuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (akuo *AttributeKVUpdateOne) Exec(ctx context.Context) error {
	_, err := akuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akuo *AttributeKVUpdateOne) ExecX(ctx context.Context) {
	if err := akuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (akuo *AttributeKVUpdateOne) check() error {
	if v, ok := akuo.mutation.EntityType(); ok {
		if err := attributekv.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "AttributeKV.entity_type": %w`, err)}
		}
	}
	if v, ok := akuo.mutation.AttributeType(); ok {
		if err := attributekv.AttributeTypeValidator(v); err != nil {
			return &ValidationError{Name: "attribute_type", err: fmt.Errorf(`ent: validator failed for field "AttributeKV.attribute_type": %w`, err)}
		}
	}
	if v, ok := akuo.mutation.AttributeKey(); ok {
		if err := attributekv.AttributeKeyValidator(v); err != nil {
			return &ValidationError{Name: "attribute_key", err: fmt.Errorf(`ent: validator failed for field "AttributeKV.attribute_key": %w`, err)}
		}
	}
	if v, ok := akuo.mutation.StrV(); ok {
		if err := attributekv.StrVValidator(v); err != nil {
			return &ValidationError{Name: "str_v", err: fmt.Errorf(`ent: validator failed for field "AttributeKV.str_v": %w`, err)}
		}
	}
	return nil
}

func (akuo *AttributeKVUpdateOne) sqlSave(ctx context.Context) (_node *AttributeKV, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attributekv.Table,
			Columns: attributekv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: attributekv.FieldID,
			},
		},
	}
	id, ok := akuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttributeKV.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := akuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attributekv.FieldID)
		for _, f := range fields {
			if !attributekv.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attributekv.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := akuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := akuo.mutation.EntityType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attributekv.FieldEntityType,
		})
	}
	if value, ok := akuo.mutation.EntityID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: attributekv.FieldEntityID,
		})
	}
	if value, ok := akuo.mutation.AttributeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attributekv.FieldAttributeType,
		})
	}
	if value, ok := akuo.mutation.AttributeKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attributekv.FieldAttributeKey,
		})
	}
	if value, ok := akuo.mutation.BoolV(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: attributekv.FieldBoolV,
		})
	}
	if akuo.mutation.BoolVCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: attributekv.FieldBoolV,
		})
	}
	if value, ok := akuo.mutation.StrV(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attributekv.FieldStrV,
		})
	}
	if akuo.mutation.StrVCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: attributekv.FieldStrV,
		})
	}
	if value, ok := akuo.mutation.LongV(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: attributekv.FieldLongV,
		})
	}
	if value, ok := akuo.mutation.AddedLongV(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: attributekv.FieldLongV,
		})
	}
	if akuo.mutation.LongVCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: attributekv.FieldLongV,
		})
	}
	if value, ok := akuo.mutation.DblV(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attributekv.FieldDblV,
		})
	}
	if value, ok := akuo.mutation.AddedDblV(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attributekv.FieldDblV,
		})
	}
	if akuo.mutation.DblVCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: attributekv.FieldDblV,
		})
	}
	if value, ok := akuo.mutation.JSONV(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attributekv.FieldJSONV,
		})
	}
	if akuo.mutation.JSONVCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: attributekv.FieldJSONV,
		})
	}
	if value, ok := akuo.mutation.LastUpdateTs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: attributekv.FieldLastUpdateTs,
		})
	}
	if value, ok := akuo.mutation.AddedLastUpdateTs(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: attributekv.FieldLastUpdateTs,
		})
	}
	_node = &AttributeKV{config: akuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, akuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attributekv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
