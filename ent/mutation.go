// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"
	"tsdb-ent-example/ent/attributekv"
	"tsdb-ent-example/ent/predicate"
	"tsdb-ent-example/ent/sensor"
	"tsdb-ent-example/ent/sensordata"
	"tsdb-ent-example/ent/tskv"
	"tsdb-ent-example/ent/tskvdictionary"
	"tsdb-ent-example/ent/tskvlatest"

	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAttributeKV    = "AttributeKV"
	TypeSensor         = "Sensor"
	TypeSensorData     = "SensorData"
	TypeTsKv           = "TsKv"
	TypeTsKvDictionary = "TsKvDictionary"
	TypeTsKvLatest     = "TsKvLatest"
)

// AttributeKVMutation represents an operation that mutates the AttributeKV nodes in the graph.
type AttributeKVMutation struct {
	config
	op                Op
	typ               string
	id                *int
	entity_type       *string
	entity_id         *uuid.UUID
	attribute_type    *string
	attribute_key     *string
	bool_v            *bool
	str_v             *string
	long_v            *int64
	addlong_v         *int64
	dbl_v             *float64
	adddbl_v          *float64
	json_v            *string
	last_update_ts    *int64
	addlast_update_ts *int64
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*AttributeKV, error)
	predicates        []predicate.AttributeKV
}

var _ ent.Mutation = (*AttributeKVMutation)(nil)

// attributekvOption allows management of the mutation configuration using functional options.
type attributekvOption func(*AttributeKVMutation)

// newAttributeKVMutation creates new mutation for the AttributeKV entity.
func newAttributeKVMutation(c config, op Op, opts ...attributekvOption) *AttributeKVMutation {
	m := &AttributeKVMutation{
		config:        c,
		op:            op,
		typ:           TypeAttributeKV,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttributeKVID sets the ID field of the mutation.
func withAttributeKVID(id int) attributekvOption {
	return func(m *AttributeKVMutation) {
		var (
			err   error
			once  sync.Once
			value *AttributeKV
		)
		m.oldValue = func(ctx context.Context) (*AttributeKV, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AttributeKV.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttributeKV sets the old AttributeKV of the mutation.
func withAttributeKV(node *AttributeKV) attributekvOption {
	return func(m *AttributeKVMutation) {
		m.oldValue = func(context.Context) (*AttributeKV, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttributeKVMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttributeKVMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttributeKVMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttributeKVMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AttributeKV.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEntityType sets the "entity_type" field.
func (m *AttributeKVMutation) SetEntityType(s string) {
	m.entity_type = &s
}

// EntityType returns the value of the "entity_type" field in the mutation.
func (m *AttributeKVMutation) EntityType() (r string, exists bool) {
	v := m.entity_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEntityType returns the old "entity_type" field's value of the AttributeKV entity.
// If the AttributeKV object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeKVMutation) OldEntityType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntityType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntityType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntityType: %w", err)
	}
	return oldValue.EntityType, nil
}

// ResetEntityType resets all changes to the "entity_type" field.
func (m *AttributeKVMutation) ResetEntityType() {
	m.entity_type = nil
}

// SetEntityID sets the "entity_id" field.
func (m *AttributeKVMutation) SetEntityID(u uuid.UUID) {
	m.entity_id = &u
}

// EntityID returns the value of the "entity_id" field in the mutation.
func (m *AttributeKVMutation) EntityID() (r uuid.UUID, exists bool) {
	v := m.entity_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntityID returns the old "entity_id" field's value of the AttributeKV entity.
// If the AttributeKV object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeKVMutation) OldEntityID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntityID: %w", err)
	}
	return oldValue.EntityID, nil
}

// ResetEntityID resets all changes to the "entity_id" field.
func (m *AttributeKVMutation) ResetEntityID() {
	m.entity_id = nil
}

// SetAttributeType sets the "attribute_type" field.
func (m *AttributeKVMutation) SetAttributeType(s string) {
	m.attribute_type = &s
}

// AttributeType returns the value of the "attribute_type" field in the mutation.
func (m *AttributeKVMutation) AttributeType() (r string, exists bool) {
	v := m.attribute_type
	if v == nil {
		return
	}
	return *v, true
}

// OldAttributeType returns the old "attribute_type" field's value of the AttributeKV entity.
// If the AttributeKV object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeKVMutation) OldAttributeType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttributeType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttributeType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttributeType: %w", err)
	}
	return oldValue.AttributeType, nil
}

// ResetAttributeType resets all changes to the "attribute_type" field.
func (m *AttributeKVMutation) ResetAttributeType() {
	m.attribute_type = nil
}

// SetAttributeKey sets the "attribute_key" field.
func (m *AttributeKVMutation) SetAttributeKey(s string) {
	m.attribute_key = &s
}

// AttributeKey returns the value of the "attribute_key" field in the mutation.
func (m *AttributeKVMutation) AttributeKey() (r string, exists bool) {
	v := m.attribute_key
	if v == nil {
		return
	}
	return *v, true
}

// OldAttributeKey returns the old "attribute_key" field's value of the AttributeKV entity.
// If the AttributeKV object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeKVMutation) OldAttributeKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttributeKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttributeKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttributeKey: %w", err)
	}
	return oldValue.AttributeKey, nil
}

// ResetAttributeKey resets all changes to the "attribute_key" field.
func (m *AttributeKVMutation) ResetAttributeKey() {
	m.attribute_key = nil
}

// SetBoolV sets the "bool_v" field.
func (m *AttributeKVMutation) SetBoolV(b bool) {
	m.bool_v = &b
}

// BoolV returns the value of the "bool_v" field in the mutation.
func (m *AttributeKVMutation) BoolV() (r bool, exists bool) {
	v := m.bool_v
	if v == nil {
		return
	}
	return *v, true
}

// OldBoolV returns the old "bool_v" field's value of the AttributeKV entity.
// If the AttributeKV object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeKVMutation) OldBoolV(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBoolV is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBoolV requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBoolV: %w", err)
	}
	return oldValue.BoolV, nil
}

// ClearBoolV clears the value of the "bool_v" field.
func (m *AttributeKVMutation) ClearBoolV() {
	m.bool_v = nil
	m.clearedFields[attributekv.FieldBoolV] = struct{}{}
}

// BoolVCleared returns if the "bool_v" field was cleared in this mutation.
func (m *AttributeKVMutation) BoolVCleared() bool {
	_, ok := m.clearedFields[attributekv.FieldBoolV]
	return ok
}

// ResetBoolV resets all changes to the "bool_v" field.
func (m *AttributeKVMutation) ResetBoolV() {
	m.bool_v = nil
	delete(m.clearedFields, attributekv.FieldBoolV)
}

// SetStrV sets the "str_v" field.
func (m *AttributeKVMutation) SetStrV(s string) {
	m.str_v = &s
}

// StrV returns the value of the "str_v" field in the mutation.
func (m *AttributeKVMutation) StrV() (r string, exists bool) {
	v := m.str_v
	if v == nil {
		return
	}
	return *v, true
}

// OldStrV returns the old "str_v" field's value of the AttributeKV entity.
// If the AttributeKV object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeKVMutation) OldStrV(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStrV is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStrV requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStrV: %w", err)
	}
	return oldValue.StrV, nil
}

// ClearStrV clears the value of the "str_v" field.
func (m *AttributeKVMutation) ClearStrV() {
	m.str_v = nil
	m.clearedFields[attributekv.FieldStrV] = struct{}{}
}

// StrVCleared returns if the "str_v" field was cleared in this mutation.
func (m *AttributeKVMutation) StrVCleared() bool {
	_, ok := m.clearedFields[attributekv.FieldStrV]
	return ok
}

// ResetStrV resets all changes to the "str_v" field.
func (m *AttributeKVMutation) ResetStrV() {
	m.str_v = nil
	delete(m.clearedFields, attributekv.FieldStrV)
}

// SetLongV sets the "long_v" field.
func (m *AttributeKVMutation) SetLongV(i int64) {
	m.long_v = &i
	m.addlong_v = nil
}

// LongV returns the value of the "long_v" field in the mutation.
func (m *AttributeKVMutation) LongV() (r int64, exists bool) {
	v := m.long_v
	if v == nil {
		return
	}
	return *v, true
}

// OldLongV returns the old "long_v" field's value of the AttributeKV entity.
// If the AttributeKV object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeKVMutation) OldLongV(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongV is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongV requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongV: %w", err)
	}
	return oldValue.LongV, nil
}

// AddLongV adds i to the "long_v" field.
func (m *AttributeKVMutation) AddLongV(i int64) {
	if m.addlong_v != nil {
		*m.addlong_v += i
	} else {
		m.addlong_v = &i
	}
}

// AddedLongV returns the value that was added to the "long_v" field in this mutation.
func (m *AttributeKVMutation) AddedLongV() (r int64, exists bool) {
	v := m.addlong_v
	if v == nil {
		return
	}
	return *v, true
}

// ClearLongV clears the value of the "long_v" field.
func (m *AttributeKVMutation) ClearLongV() {
	m.long_v = nil
	m.addlong_v = nil
	m.clearedFields[attributekv.FieldLongV] = struct{}{}
}

// LongVCleared returns if the "long_v" field was cleared in this mutation.
func (m *AttributeKVMutation) LongVCleared() bool {
	_, ok := m.clearedFields[attributekv.FieldLongV]
	return ok
}

// ResetLongV resets all changes to the "long_v" field.
func (m *AttributeKVMutation) ResetLongV() {
	m.long_v = nil
	m.addlong_v = nil
	delete(m.clearedFields, attributekv.FieldLongV)
}

// SetDblV sets the "dbl_v" field.
func (m *AttributeKVMutation) SetDblV(f float64) {
	m.dbl_v = &f
	m.adddbl_v = nil
}

// DblV returns the value of the "dbl_v" field in the mutation.
func (m *AttributeKVMutation) DblV() (r float64, exists bool) {
	v := m.dbl_v
	if v == nil {
		return
	}
	return *v, true
}

// OldDblV returns the old "dbl_v" field's value of the AttributeKV entity.
// If the AttributeKV object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeKVMutation) OldDblV(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDblV is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDblV requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDblV: %w", err)
	}
	return oldValue.DblV, nil
}

// AddDblV adds f to the "dbl_v" field.
func (m *AttributeKVMutation) AddDblV(f float64) {
	if m.adddbl_v != nil {
		*m.adddbl_v += f
	} else {
		m.adddbl_v = &f
	}
}

// AddedDblV returns the value that was added to the "dbl_v" field in this mutation.
func (m *AttributeKVMutation) AddedDblV() (r float64, exists bool) {
	v := m.adddbl_v
	if v == nil {
		return
	}
	return *v, true
}

// ClearDblV clears the value of the "dbl_v" field.
func (m *AttributeKVMutation) ClearDblV() {
	m.dbl_v = nil
	m.adddbl_v = nil
	m.clearedFields[attributekv.FieldDblV] = struct{}{}
}

// DblVCleared returns if the "dbl_v" field was cleared in this mutation.
func (m *AttributeKVMutation) DblVCleared() bool {
	_, ok := m.clearedFields[attributekv.FieldDblV]
	return ok
}

// ResetDblV resets all changes to the "dbl_v" field.
func (m *AttributeKVMutation) ResetDblV() {
	m.dbl_v = nil
	m.adddbl_v = nil
	delete(m.clearedFields, attributekv.FieldDblV)
}

// SetJSONV sets the "json_v" field.
func (m *AttributeKVMutation) SetJSONV(s string) {
	m.json_v = &s
}

// JSONV returns the value of the "json_v" field in the mutation.
func (m *AttributeKVMutation) JSONV() (r string, exists bool) {
	v := m.json_v
	if v == nil {
		return
	}
	return *v, true
}

// OldJSONV returns the old "json_v" field's value of the AttributeKV entity.
// If the AttributeKV object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeKVMutation) OldJSONV(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJSONV is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJSONV requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJSONV: %w", err)
	}
	return oldValue.JSONV, nil
}

// ClearJSONV clears the value of the "json_v" field.
func (m *AttributeKVMutation) ClearJSONV() {
	m.json_v = nil
	m.clearedFields[attributekv.FieldJSONV] = struct{}{}
}

// JSONVCleared returns if the "json_v" field was cleared in this mutation.
func (m *AttributeKVMutation) JSONVCleared() bool {
	_, ok := m.clearedFields[attributekv.FieldJSONV]
	return ok
}

// ResetJSONV resets all changes to the "json_v" field.
func (m *AttributeKVMutation) ResetJSONV() {
	m.json_v = nil
	delete(m.clearedFields, attributekv.FieldJSONV)
}

// SetLastUpdateTs sets the "last_update_ts" field.
func (m *AttributeKVMutation) SetLastUpdateTs(i int64) {
	m.last_update_ts = &i
	m.addlast_update_ts = nil
}

// LastUpdateTs returns the value of the "last_update_ts" field in the mutation.
func (m *AttributeKVMutation) LastUpdateTs() (r int64, exists bool) {
	v := m.last_update_ts
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUpdateTs returns the old "last_update_ts" field's value of the AttributeKV entity.
// If the AttributeKV object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttributeKVMutation) OldLastUpdateTs(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUpdateTs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUpdateTs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUpdateTs: %w", err)
	}
	return oldValue.LastUpdateTs, nil
}

// AddLastUpdateTs adds i to the "last_update_ts" field.
func (m *AttributeKVMutation) AddLastUpdateTs(i int64) {
	if m.addlast_update_ts != nil {
		*m.addlast_update_ts += i
	} else {
		m.addlast_update_ts = &i
	}
}

// AddedLastUpdateTs returns the value that was added to the "last_update_ts" field in this mutation.
func (m *AttributeKVMutation) AddedLastUpdateTs() (r int64, exists bool) {
	v := m.addlast_update_ts
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastUpdateTs resets all changes to the "last_update_ts" field.
func (m *AttributeKVMutation) ResetLastUpdateTs() {
	m.last_update_ts = nil
	m.addlast_update_ts = nil
}

// Where appends a list predicates to the AttributeKVMutation builder.
func (m *AttributeKVMutation) Where(ps ...predicate.AttributeKV) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AttributeKVMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AttributeKV).
func (m *AttributeKVMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttributeKVMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.entity_type != nil {
		fields = append(fields, attributekv.FieldEntityType)
	}
	if m.entity_id != nil {
		fields = append(fields, attributekv.FieldEntityID)
	}
	if m.attribute_type != nil {
		fields = append(fields, attributekv.FieldAttributeType)
	}
	if m.attribute_key != nil {
		fields = append(fields, attributekv.FieldAttributeKey)
	}
	if m.bool_v != nil {
		fields = append(fields, attributekv.FieldBoolV)
	}
	if m.str_v != nil {
		fields = append(fields, attributekv.FieldStrV)
	}
	if m.long_v != nil {
		fields = append(fields, attributekv.FieldLongV)
	}
	if m.dbl_v != nil {
		fields = append(fields, attributekv.FieldDblV)
	}
	if m.json_v != nil {
		fields = append(fields, attributekv.FieldJSONV)
	}
	if m.last_update_ts != nil {
		fields = append(fields, attributekv.FieldLastUpdateTs)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttributeKVMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attributekv.FieldEntityType:
		return m.EntityType()
	case attributekv.FieldEntityID:
		return m.EntityID()
	case attributekv.FieldAttributeType:
		return m.AttributeType()
	case attributekv.FieldAttributeKey:
		return m.AttributeKey()
	case attributekv.FieldBoolV:
		return m.BoolV()
	case attributekv.FieldStrV:
		return m.StrV()
	case attributekv.FieldLongV:
		return m.LongV()
	case attributekv.FieldDblV:
		return m.DblV()
	case attributekv.FieldJSONV:
		return m.JSONV()
	case attributekv.FieldLastUpdateTs:
		return m.LastUpdateTs()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttributeKVMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attributekv.FieldEntityType:
		return m.OldEntityType(ctx)
	case attributekv.FieldEntityID:
		return m.OldEntityID(ctx)
	case attributekv.FieldAttributeType:
		return m.OldAttributeType(ctx)
	case attributekv.FieldAttributeKey:
		return m.OldAttributeKey(ctx)
	case attributekv.FieldBoolV:
		return m.OldBoolV(ctx)
	case attributekv.FieldStrV:
		return m.OldStrV(ctx)
	case attributekv.FieldLongV:
		return m.OldLongV(ctx)
	case attributekv.FieldDblV:
		return m.OldDblV(ctx)
	case attributekv.FieldJSONV:
		return m.OldJSONV(ctx)
	case attributekv.FieldLastUpdateTs:
		return m.OldLastUpdateTs(ctx)
	}
	return nil, fmt.Errorf("unknown AttributeKV field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeKVMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attributekv.FieldEntityType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntityType(v)
		return nil
	case attributekv.FieldEntityID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntityID(v)
		return nil
	case attributekv.FieldAttributeType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttributeType(v)
		return nil
	case attributekv.FieldAttributeKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttributeKey(v)
		return nil
	case attributekv.FieldBoolV:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBoolV(v)
		return nil
	case attributekv.FieldStrV:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStrV(v)
		return nil
	case attributekv.FieldLongV:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongV(v)
		return nil
	case attributekv.FieldDblV:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDblV(v)
		return nil
	case attributekv.FieldJSONV:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJSONV(v)
		return nil
	case attributekv.FieldLastUpdateTs:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUpdateTs(v)
		return nil
	}
	return fmt.Errorf("unknown AttributeKV field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttributeKVMutation) AddedFields() []string {
	var fields []string
	if m.addlong_v != nil {
		fields = append(fields, attributekv.FieldLongV)
	}
	if m.adddbl_v != nil {
		fields = append(fields, attributekv.FieldDblV)
	}
	if m.addlast_update_ts != nil {
		fields = append(fields, attributekv.FieldLastUpdateTs)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttributeKVMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case attributekv.FieldLongV:
		return m.AddedLongV()
	case attributekv.FieldDblV:
		return m.AddedDblV()
	case attributekv.FieldLastUpdateTs:
		return m.AddedLastUpdateTs()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttributeKVMutation) AddField(name string, value ent.Value) error {
	switch name {
	case attributekv.FieldLongV:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongV(v)
		return nil
	case attributekv.FieldDblV:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDblV(v)
		return nil
	case attributekv.FieldLastUpdateTs:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastUpdateTs(v)
		return nil
	}
	return fmt.Errorf("unknown AttributeKV numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttributeKVMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(attributekv.FieldBoolV) {
		fields = append(fields, attributekv.FieldBoolV)
	}
	if m.FieldCleared(attributekv.FieldStrV) {
		fields = append(fields, attributekv.FieldStrV)
	}
	if m.FieldCleared(attributekv.FieldLongV) {
		fields = append(fields, attributekv.FieldLongV)
	}
	if m.FieldCleared(attributekv.FieldDblV) {
		fields = append(fields, attributekv.FieldDblV)
	}
	if m.FieldCleared(attributekv.FieldJSONV) {
		fields = append(fields, attributekv.FieldJSONV)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttributeKVMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttributeKVMutation) ClearField(name string) error {
	switch name {
	case attributekv.FieldBoolV:
		m.ClearBoolV()
		return nil
	case attributekv.FieldStrV:
		m.ClearStrV()
		return nil
	case attributekv.FieldLongV:
		m.ClearLongV()
		return nil
	case attributekv.FieldDblV:
		m.ClearDblV()
		return nil
	case attributekv.FieldJSONV:
		m.ClearJSONV()
		return nil
	}
	return fmt.Errorf("unknown AttributeKV nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttributeKVMutation) ResetField(name string) error {
	switch name {
	case attributekv.FieldEntityType:
		m.ResetEntityType()
		return nil
	case attributekv.FieldEntityID:
		m.ResetEntityID()
		return nil
	case attributekv.FieldAttributeType:
		m.ResetAttributeType()
		return nil
	case attributekv.FieldAttributeKey:
		m.ResetAttributeKey()
		return nil
	case attributekv.FieldBoolV:
		m.ResetBoolV()
		return nil
	case attributekv.FieldStrV:
		m.ResetStrV()
		return nil
	case attributekv.FieldLongV:
		m.ResetLongV()
		return nil
	case attributekv.FieldDblV:
		m.ResetDblV()
		return nil
	case attributekv.FieldJSONV:
		m.ResetJSONV()
		return nil
	case attributekv.FieldLastUpdateTs:
		m.ResetLastUpdateTs()
		return nil
	}
	return fmt.Errorf("unknown AttributeKV field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttributeKVMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttributeKVMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttributeKVMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttributeKVMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttributeKVMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttributeKVMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttributeKVMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AttributeKV unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttributeKVMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AttributeKV edge %s", name)
}

// SensorMutation represents an operation that mutates the Sensor nodes in the graph.
type SensorMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_type         *string
	location      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Sensor, error)
	predicates    []predicate.Sensor
}

var _ ent.Mutation = (*SensorMutation)(nil)

// sensorOption allows management of the mutation configuration using functional options.
type sensorOption func(*SensorMutation)

// newSensorMutation creates new mutation for the Sensor entity.
func newSensorMutation(c config, op Op, opts ...sensorOption) *SensorMutation {
	m := &SensorMutation{
		config:        c,
		op:            op,
		typ:           TypeSensor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSensorID sets the ID field of the mutation.
func withSensorID(id int) sensorOption {
	return func(m *SensorMutation) {
		var (
			err   error
			once  sync.Once
			value *Sensor
		)
		m.oldValue = func(ctx context.Context) (*Sensor, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Sensor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSensor sets the old Sensor of the mutation.
func withSensor(node *Sensor) sensorOption {
	return func(m *SensorMutation) {
		m.oldValue = func(context.Context) (*Sensor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SensorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SensorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SensorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SensorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Sensor.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *SensorMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *SensorMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Sensor entity.
// If the Sensor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *SensorMutation) ResetType() {
	m._type = nil
}

// SetLocation sets the "location" field.
func (m *SensorMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *SensorMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Sensor entity.
// If the Sensor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *SensorMutation) ResetLocation() {
	m.location = nil
}

// Where appends a list predicates to the SensorMutation builder.
func (m *SensorMutation) Where(ps ...predicate.Sensor) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SensorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Sensor).
func (m *SensorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SensorMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._type != nil {
		fields = append(fields, sensor.FieldType)
	}
	if m.location != nil {
		fields = append(fields, sensor.FieldLocation)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SensorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sensor.FieldType:
		return m.GetType()
	case sensor.FieldLocation:
		return m.Location()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SensorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sensor.FieldType:
		return m.OldType(ctx)
	case sensor.FieldLocation:
		return m.OldLocation(ctx)
	}
	return nil, fmt.Errorf("unknown Sensor field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SensorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sensor.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case sensor.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	}
	return fmt.Errorf("unknown Sensor field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SensorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SensorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SensorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Sensor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SensorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SensorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SensorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Sensor nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SensorMutation) ResetField(name string) error {
	switch name {
	case sensor.FieldType:
		m.ResetType()
		return nil
	case sensor.FieldLocation:
		m.ResetLocation()
		return nil
	}
	return fmt.Errorf("unknown Sensor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SensorMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SensorMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SensorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SensorMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SensorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SensorMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SensorMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Sensor unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SensorMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Sensor edge %s", name)
}

// SensorDataMutation represents an operation that mutates the SensorData nodes in the graph.
type SensorDataMutation struct {
	config
	op             Op
	typ            string
	id             *int
	time           *time.Time
	sensor_id      *int
	addsensor_id   *int
	temperature    *float64
	addtemperature *float64
	cpu            *float64
	addcpu         *float64
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*SensorData, error)
	predicates     []predicate.SensorData
}

var _ ent.Mutation = (*SensorDataMutation)(nil)

// sensordataOption allows management of the mutation configuration using functional options.
type sensordataOption func(*SensorDataMutation)

// newSensorDataMutation creates new mutation for the SensorData entity.
func newSensorDataMutation(c config, op Op, opts ...sensordataOption) *SensorDataMutation {
	m := &SensorDataMutation{
		config:        c,
		op:            op,
		typ:           TypeSensorData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSensorDataID sets the ID field of the mutation.
func withSensorDataID(id int) sensordataOption {
	return func(m *SensorDataMutation) {
		var (
			err   error
			once  sync.Once
			value *SensorData
		)
		m.oldValue = func(ctx context.Context) (*SensorData, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SensorData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSensorData sets the old SensorData of the mutation.
func withSensorData(node *SensorData) sensordataOption {
	return func(m *SensorDataMutation) {
		m.oldValue = func(context.Context) (*SensorData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SensorDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SensorDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SensorDataMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SensorDataMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SensorData.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTime sets the "time" field.
func (m *SensorDataMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *SensorDataMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the SensorData entity.
// If the SensorData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorDataMutation) OldTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ClearTime clears the value of the "time" field.
func (m *SensorDataMutation) ClearTime() {
	m.time = nil
	m.clearedFields[sensordata.FieldTime] = struct{}{}
}

// TimeCleared returns if the "time" field was cleared in this mutation.
func (m *SensorDataMutation) TimeCleared() bool {
	_, ok := m.clearedFields[sensordata.FieldTime]
	return ok
}

// ResetTime resets all changes to the "time" field.
func (m *SensorDataMutation) ResetTime() {
	m.time = nil
	delete(m.clearedFields, sensordata.FieldTime)
}

// SetSensorID sets the "sensor_id" field.
func (m *SensorDataMutation) SetSensorID(i int) {
	m.sensor_id = &i
	m.addsensor_id = nil
}

// SensorID returns the value of the "sensor_id" field in the mutation.
func (m *SensorDataMutation) SensorID() (r int, exists bool) {
	v := m.sensor_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSensorID returns the old "sensor_id" field's value of the SensorData entity.
// If the SensorData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorDataMutation) OldSensorID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSensorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSensorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSensorID: %w", err)
	}
	return oldValue.SensorID, nil
}

// AddSensorID adds i to the "sensor_id" field.
func (m *SensorDataMutation) AddSensorID(i int) {
	if m.addsensor_id != nil {
		*m.addsensor_id += i
	} else {
		m.addsensor_id = &i
	}
}

// AddedSensorID returns the value that was added to the "sensor_id" field in this mutation.
func (m *SensorDataMutation) AddedSensorID() (r int, exists bool) {
	v := m.addsensor_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetSensorID resets all changes to the "sensor_id" field.
func (m *SensorDataMutation) ResetSensorID() {
	m.sensor_id = nil
	m.addsensor_id = nil
}

// SetTemperature sets the "temperature" field.
func (m *SensorDataMutation) SetTemperature(f float64) {
	m.temperature = &f
	m.addtemperature = nil
}

// Temperature returns the value of the "temperature" field in the mutation.
func (m *SensorDataMutation) Temperature() (r float64, exists bool) {
	v := m.temperature
	if v == nil {
		return
	}
	return *v, true
}

// OldTemperature returns the old "temperature" field's value of the SensorData entity.
// If the SensorData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorDataMutation) OldTemperature(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTemperature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTemperature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTemperature: %w", err)
	}
	return oldValue.Temperature, nil
}

// AddTemperature adds f to the "temperature" field.
func (m *SensorDataMutation) AddTemperature(f float64) {
	if m.addtemperature != nil {
		*m.addtemperature += f
	} else {
		m.addtemperature = &f
	}
}

// AddedTemperature returns the value that was added to the "temperature" field in this mutation.
func (m *SensorDataMutation) AddedTemperature() (r float64, exists bool) {
	v := m.addtemperature
	if v == nil {
		return
	}
	return *v, true
}

// ResetTemperature resets all changes to the "temperature" field.
func (m *SensorDataMutation) ResetTemperature() {
	m.temperature = nil
	m.addtemperature = nil
}

// SetCPU sets the "cpu" field.
func (m *SensorDataMutation) SetCPU(f float64) {
	m.cpu = &f
	m.addcpu = nil
}

// CPU returns the value of the "cpu" field in the mutation.
func (m *SensorDataMutation) CPU() (r float64, exists bool) {
	v := m.cpu
	if v == nil {
		return
	}
	return *v, true
}

// OldCPU returns the old "cpu" field's value of the SensorData entity.
// If the SensorData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SensorDataMutation) OldCPU(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCPU is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCPU requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCPU: %w", err)
	}
	return oldValue.CPU, nil
}

// AddCPU adds f to the "cpu" field.
func (m *SensorDataMutation) AddCPU(f float64) {
	if m.addcpu != nil {
		*m.addcpu += f
	} else {
		m.addcpu = &f
	}
}

// AddedCPU returns the value that was added to the "cpu" field in this mutation.
func (m *SensorDataMutation) AddedCPU() (r float64, exists bool) {
	v := m.addcpu
	if v == nil {
		return
	}
	return *v, true
}

// ResetCPU resets all changes to the "cpu" field.
func (m *SensorDataMutation) ResetCPU() {
	m.cpu = nil
	m.addcpu = nil
}

// Where appends a list predicates to the SensorDataMutation builder.
func (m *SensorDataMutation) Where(ps ...predicate.SensorData) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SensorDataMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SensorData).
func (m *SensorDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SensorDataMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.time != nil {
		fields = append(fields, sensordata.FieldTime)
	}
	if m.sensor_id != nil {
		fields = append(fields, sensordata.FieldSensorID)
	}
	if m.temperature != nil {
		fields = append(fields, sensordata.FieldTemperature)
	}
	if m.cpu != nil {
		fields = append(fields, sensordata.FieldCPU)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SensorDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sensordata.FieldTime:
		return m.Time()
	case sensordata.FieldSensorID:
		return m.SensorID()
	case sensordata.FieldTemperature:
		return m.Temperature()
	case sensordata.FieldCPU:
		return m.CPU()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SensorDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sensordata.FieldTime:
		return m.OldTime(ctx)
	case sensordata.FieldSensorID:
		return m.OldSensorID(ctx)
	case sensordata.FieldTemperature:
		return m.OldTemperature(ctx)
	case sensordata.FieldCPU:
		return m.OldCPU(ctx)
	}
	return nil, fmt.Errorf("unknown SensorData field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SensorDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sensordata.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case sensordata.FieldSensorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSensorID(v)
		return nil
	case sensordata.FieldTemperature:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTemperature(v)
		return nil
	case sensordata.FieldCPU:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCPU(v)
		return nil
	}
	return fmt.Errorf("unknown SensorData field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SensorDataMutation) AddedFields() []string {
	var fields []string
	if m.addsensor_id != nil {
		fields = append(fields, sensordata.FieldSensorID)
	}
	if m.addtemperature != nil {
		fields = append(fields, sensordata.FieldTemperature)
	}
	if m.addcpu != nil {
		fields = append(fields, sensordata.FieldCPU)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SensorDataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sensordata.FieldSensorID:
		return m.AddedSensorID()
	case sensordata.FieldTemperature:
		return m.AddedTemperature()
	case sensordata.FieldCPU:
		return m.AddedCPU()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SensorDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sensordata.FieldSensorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSensorID(v)
		return nil
	case sensordata.FieldTemperature:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTemperature(v)
		return nil
	case sensordata.FieldCPU:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCPU(v)
		return nil
	}
	return fmt.Errorf("unknown SensorData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SensorDataMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sensordata.FieldTime) {
		fields = append(fields, sensordata.FieldTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SensorDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SensorDataMutation) ClearField(name string) error {
	switch name {
	case sensordata.FieldTime:
		m.ClearTime()
		return nil
	}
	return fmt.Errorf("unknown SensorData nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SensorDataMutation) ResetField(name string) error {
	switch name {
	case sensordata.FieldTime:
		m.ResetTime()
		return nil
	case sensordata.FieldSensorID:
		m.ResetSensorID()
		return nil
	case sensordata.FieldTemperature:
		m.ResetTemperature()
		return nil
	case sensordata.FieldCPU:
		m.ResetCPU()
		return nil
	}
	return fmt.Errorf("unknown SensorData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SensorDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SensorDataMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SensorDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SensorDataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SensorDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SensorDataMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SensorDataMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SensorData unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SensorDataMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SensorData edge %s", name)
}

// TsKvMutation represents an operation that mutates the TsKv nodes in the graph.
type TsKvMutation struct {
	config
	op            Op
	typ           string
	id            *int
	entity_id     *uuid.UUID
	key           *int
	addkey        *int
	bool_v        *bool
	str_v         *string
	long_v        *int64
	addlong_v     *int64
	dbl_v         *float64
	adddbl_v      *float64
	json_v        *string
	ts            *int64
	addts         *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TsKv, error)
	predicates    []predicate.TsKv
}

var _ ent.Mutation = (*TsKvMutation)(nil)

// tskvOption allows management of the mutation configuration using functional options.
type tskvOption func(*TsKvMutation)

// newTsKvMutation creates new mutation for the TsKv entity.
func newTsKvMutation(c config, op Op, opts ...tskvOption) *TsKvMutation {
	m := &TsKvMutation{
		config:        c,
		op:            op,
		typ:           TypeTsKv,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTsKvID sets the ID field of the mutation.
func withTsKvID(id int) tskvOption {
	return func(m *TsKvMutation) {
		var (
			err   error
			once  sync.Once
			value *TsKv
		)
		m.oldValue = func(ctx context.Context) (*TsKv, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TsKv.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTsKv sets the old TsKv of the mutation.
func withTsKv(node *TsKv) tskvOption {
	return func(m *TsKvMutation) {
		m.oldValue = func(context.Context) (*TsKv, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TsKvMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TsKvMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TsKvMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TsKvMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TsKv.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEntityID sets the "entity_id" field.
func (m *TsKvMutation) SetEntityID(u uuid.UUID) {
	m.entity_id = &u
}

// EntityID returns the value of the "entity_id" field in the mutation.
func (m *TsKvMutation) EntityID() (r uuid.UUID, exists bool) {
	v := m.entity_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntityID returns the old "entity_id" field's value of the TsKv entity.
// If the TsKv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvMutation) OldEntityID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntityID: %w", err)
	}
	return oldValue.EntityID, nil
}

// ResetEntityID resets all changes to the "entity_id" field.
func (m *TsKvMutation) ResetEntityID() {
	m.entity_id = nil
}

// SetKey sets the "key" field.
func (m *TsKvMutation) SetKey(i int) {
	m.key = &i
	m.addkey = nil
}

// Key returns the value of the "key" field in the mutation.
func (m *TsKvMutation) Key() (r int, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the TsKv entity.
// If the TsKv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvMutation) OldKey(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// AddKey adds i to the "key" field.
func (m *TsKvMutation) AddKey(i int) {
	if m.addkey != nil {
		*m.addkey += i
	} else {
		m.addkey = &i
	}
}

// AddedKey returns the value that was added to the "key" field in this mutation.
func (m *TsKvMutation) AddedKey() (r int, exists bool) {
	v := m.addkey
	if v == nil {
		return
	}
	return *v, true
}

// ResetKey resets all changes to the "key" field.
func (m *TsKvMutation) ResetKey() {
	m.key = nil
	m.addkey = nil
}

// SetBoolV sets the "bool_v" field.
func (m *TsKvMutation) SetBoolV(b bool) {
	m.bool_v = &b
}

// BoolV returns the value of the "bool_v" field in the mutation.
func (m *TsKvMutation) BoolV() (r bool, exists bool) {
	v := m.bool_v
	if v == nil {
		return
	}
	return *v, true
}

// OldBoolV returns the old "bool_v" field's value of the TsKv entity.
// If the TsKv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvMutation) OldBoolV(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBoolV is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBoolV requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBoolV: %w", err)
	}
	return oldValue.BoolV, nil
}

// ClearBoolV clears the value of the "bool_v" field.
func (m *TsKvMutation) ClearBoolV() {
	m.bool_v = nil
	m.clearedFields[tskv.FieldBoolV] = struct{}{}
}

// BoolVCleared returns if the "bool_v" field was cleared in this mutation.
func (m *TsKvMutation) BoolVCleared() bool {
	_, ok := m.clearedFields[tskv.FieldBoolV]
	return ok
}

// ResetBoolV resets all changes to the "bool_v" field.
func (m *TsKvMutation) ResetBoolV() {
	m.bool_v = nil
	delete(m.clearedFields, tskv.FieldBoolV)
}

// SetStrV sets the "str_v" field.
func (m *TsKvMutation) SetStrV(s string) {
	m.str_v = &s
}

// StrV returns the value of the "str_v" field in the mutation.
func (m *TsKvMutation) StrV() (r string, exists bool) {
	v := m.str_v
	if v == nil {
		return
	}
	return *v, true
}

// OldStrV returns the old "str_v" field's value of the TsKv entity.
// If the TsKv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvMutation) OldStrV(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStrV is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStrV requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStrV: %w", err)
	}
	return oldValue.StrV, nil
}

// ClearStrV clears the value of the "str_v" field.
func (m *TsKvMutation) ClearStrV() {
	m.str_v = nil
	m.clearedFields[tskv.FieldStrV] = struct{}{}
}

// StrVCleared returns if the "str_v" field was cleared in this mutation.
func (m *TsKvMutation) StrVCleared() bool {
	_, ok := m.clearedFields[tskv.FieldStrV]
	return ok
}

// ResetStrV resets all changes to the "str_v" field.
func (m *TsKvMutation) ResetStrV() {
	m.str_v = nil
	delete(m.clearedFields, tskv.FieldStrV)
}

// SetLongV sets the "long_v" field.
func (m *TsKvMutation) SetLongV(i int64) {
	m.long_v = &i
	m.addlong_v = nil
}

// LongV returns the value of the "long_v" field in the mutation.
func (m *TsKvMutation) LongV() (r int64, exists bool) {
	v := m.long_v
	if v == nil {
		return
	}
	return *v, true
}

// OldLongV returns the old "long_v" field's value of the TsKv entity.
// If the TsKv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvMutation) OldLongV(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongV is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongV requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongV: %w", err)
	}
	return oldValue.LongV, nil
}

// AddLongV adds i to the "long_v" field.
func (m *TsKvMutation) AddLongV(i int64) {
	if m.addlong_v != nil {
		*m.addlong_v += i
	} else {
		m.addlong_v = &i
	}
}

// AddedLongV returns the value that was added to the "long_v" field in this mutation.
func (m *TsKvMutation) AddedLongV() (r int64, exists bool) {
	v := m.addlong_v
	if v == nil {
		return
	}
	return *v, true
}

// ClearLongV clears the value of the "long_v" field.
func (m *TsKvMutation) ClearLongV() {
	m.long_v = nil
	m.addlong_v = nil
	m.clearedFields[tskv.FieldLongV] = struct{}{}
}

// LongVCleared returns if the "long_v" field was cleared in this mutation.
func (m *TsKvMutation) LongVCleared() bool {
	_, ok := m.clearedFields[tskv.FieldLongV]
	return ok
}

// ResetLongV resets all changes to the "long_v" field.
func (m *TsKvMutation) ResetLongV() {
	m.long_v = nil
	m.addlong_v = nil
	delete(m.clearedFields, tskv.FieldLongV)
}

// SetDblV sets the "dbl_v" field.
func (m *TsKvMutation) SetDblV(f float64) {
	m.dbl_v = &f
	m.adddbl_v = nil
}

// DblV returns the value of the "dbl_v" field in the mutation.
func (m *TsKvMutation) DblV() (r float64, exists bool) {
	v := m.dbl_v
	if v == nil {
		return
	}
	return *v, true
}

// OldDblV returns the old "dbl_v" field's value of the TsKv entity.
// If the TsKv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvMutation) OldDblV(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDblV is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDblV requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDblV: %w", err)
	}
	return oldValue.DblV, nil
}

// AddDblV adds f to the "dbl_v" field.
func (m *TsKvMutation) AddDblV(f float64) {
	if m.adddbl_v != nil {
		*m.adddbl_v += f
	} else {
		m.adddbl_v = &f
	}
}

// AddedDblV returns the value that was added to the "dbl_v" field in this mutation.
func (m *TsKvMutation) AddedDblV() (r float64, exists bool) {
	v := m.adddbl_v
	if v == nil {
		return
	}
	return *v, true
}

// ClearDblV clears the value of the "dbl_v" field.
func (m *TsKvMutation) ClearDblV() {
	m.dbl_v = nil
	m.adddbl_v = nil
	m.clearedFields[tskv.FieldDblV] = struct{}{}
}

// DblVCleared returns if the "dbl_v" field was cleared in this mutation.
func (m *TsKvMutation) DblVCleared() bool {
	_, ok := m.clearedFields[tskv.FieldDblV]
	return ok
}

// ResetDblV resets all changes to the "dbl_v" field.
func (m *TsKvMutation) ResetDblV() {
	m.dbl_v = nil
	m.adddbl_v = nil
	delete(m.clearedFields, tskv.FieldDblV)
}

// SetJSONV sets the "json_v" field.
func (m *TsKvMutation) SetJSONV(s string) {
	m.json_v = &s
}

// JSONV returns the value of the "json_v" field in the mutation.
func (m *TsKvMutation) JSONV() (r string, exists bool) {
	v := m.json_v
	if v == nil {
		return
	}
	return *v, true
}

// OldJSONV returns the old "json_v" field's value of the TsKv entity.
// If the TsKv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvMutation) OldJSONV(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJSONV is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJSONV requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJSONV: %w", err)
	}
	return oldValue.JSONV, nil
}

// ClearJSONV clears the value of the "json_v" field.
func (m *TsKvMutation) ClearJSONV() {
	m.json_v = nil
	m.clearedFields[tskv.FieldJSONV] = struct{}{}
}

// JSONVCleared returns if the "json_v" field was cleared in this mutation.
func (m *TsKvMutation) JSONVCleared() bool {
	_, ok := m.clearedFields[tskv.FieldJSONV]
	return ok
}

// ResetJSONV resets all changes to the "json_v" field.
func (m *TsKvMutation) ResetJSONV() {
	m.json_v = nil
	delete(m.clearedFields, tskv.FieldJSONV)
}

// SetTs sets the "ts" field.
func (m *TsKvMutation) SetTs(i int64) {
	m.ts = &i
	m.addts = nil
}

// Ts returns the value of the "ts" field in the mutation.
func (m *TsKvMutation) Ts() (r int64, exists bool) {
	v := m.ts
	if v == nil {
		return
	}
	return *v, true
}

// OldTs returns the old "ts" field's value of the TsKv entity.
// If the TsKv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvMutation) OldTs(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTs: %w", err)
	}
	return oldValue.Ts, nil
}

// AddTs adds i to the "ts" field.
func (m *TsKvMutation) AddTs(i int64) {
	if m.addts != nil {
		*m.addts += i
	} else {
		m.addts = &i
	}
}

// AddedTs returns the value that was added to the "ts" field in this mutation.
func (m *TsKvMutation) AddedTs() (r int64, exists bool) {
	v := m.addts
	if v == nil {
		return
	}
	return *v, true
}

// ResetTs resets all changes to the "ts" field.
func (m *TsKvMutation) ResetTs() {
	m.ts = nil
	m.addts = nil
}

// Where appends a list predicates to the TsKvMutation builder.
func (m *TsKvMutation) Where(ps ...predicate.TsKv) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TsKvMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TsKv).
func (m *TsKvMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TsKvMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.entity_id != nil {
		fields = append(fields, tskv.FieldEntityID)
	}
	if m.key != nil {
		fields = append(fields, tskv.FieldKey)
	}
	if m.bool_v != nil {
		fields = append(fields, tskv.FieldBoolV)
	}
	if m.str_v != nil {
		fields = append(fields, tskv.FieldStrV)
	}
	if m.long_v != nil {
		fields = append(fields, tskv.FieldLongV)
	}
	if m.dbl_v != nil {
		fields = append(fields, tskv.FieldDblV)
	}
	if m.json_v != nil {
		fields = append(fields, tskv.FieldJSONV)
	}
	if m.ts != nil {
		fields = append(fields, tskv.FieldTs)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TsKvMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tskv.FieldEntityID:
		return m.EntityID()
	case tskv.FieldKey:
		return m.Key()
	case tskv.FieldBoolV:
		return m.BoolV()
	case tskv.FieldStrV:
		return m.StrV()
	case tskv.FieldLongV:
		return m.LongV()
	case tskv.FieldDblV:
		return m.DblV()
	case tskv.FieldJSONV:
		return m.JSONV()
	case tskv.FieldTs:
		return m.Ts()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TsKvMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tskv.FieldEntityID:
		return m.OldEntityID(ctx)
	case tskv.FieldKey:
		return m.OldKey(ctx)
	case tskv.FieldBoolV:
		return m.OldBoolV(ctx)
	case tskv.FieldStrV:
		return m.OldStrV(ctx)
	case tskv.FieldLongV:
		return m.OldLongV(ctx)
	case tskv.FieldDblV:
		return m.OldDblV(ctx)
	case tskv.FieldJSONV:
		return m.OldJSONV(ctx)
	case tskv.FieldTs:
		return m.OldTs(ctx)
	}
	return nil, fmt.Errorf("unknown TsKv field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TsKvMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tskv.FieldEntityID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntityID(v)
		return nil
	case tskv.FieldKey:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case tskv.FieldBoolV:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBoolV(v)
		return nil
	case tskv.FieldStrV:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStrV(v)
		return nil
	case tskv.FieldLongV:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongV(v)
		return nil
	case tskv.FieldDblV:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDblV(v)
		return nil
	case tskv.FieldJSONV:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJSONV(v)
		return nil
	case tskv.FieldTs:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTs(v)
		return nil
	}
	return fmt.Errorf("unknown TsKv field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TsKvMutation) AddedFields() []string {
	var fields []string
	if m.addkey != nil {
		fields = append(fields, tskv.FieldKey)
	}
	if m.addlong_v != nil {
		fields = append(fields, tskv.FieldLongV)
	}
	if m.adddbl_v != nil {
		fields = append(fields, tskv.FieldDblV)
	}
	if m.addts != nil {
		fields = append(fields, tskv.FieldTs)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TsKvMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tskv.FieldKey:
		return m.AddedKey()
	case tskv.FieldLongV:
		return m.AddedLongV()
	case tskv.FieldDblV:
		return m.AddedDblV()
	case tskv.FieldTs:
		return m.AddedTs()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TsKvMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tskv.FieldKey:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddKey(v)
		return nil
	case tskv.FieldLongV:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongV(v)
		return nil
	case tskv.FieldDblV:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDblV(v)
		return nil
	case tskv.FieldTs:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTs(v)
		return nil
	}
	return fmt.Errorf("unknown TsKv numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TsKvMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tskv.FieldBoolV) {
		fields = append(fields, tskv.FieldBoolV)
	}
	if m.FieldCleared(tskv.FieldStrV) {
		fields = append(fields, tskv.FieldStrV)
	}
	if m.FieldCleared(tskv.FieldLongV) {
		fields = append(fields, tskv.FieldLongV)
	}
	if m.FieldCleared(tskv.FieldDblV) {
		fields = append(fields, tskv.FieldDblV)
	}
	if m.FieldCleared(tskv.FieldJSONV) {
		fields = append(fields, tskv.FieldJSONV)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TsKvMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TsKvMutation) ClearField(name string) error {
	switch name {
	case tskv.FieldBoolV:
		m.ClearBoolV()
		return nil
	case tskv.FieldStrV:
		m.ClearStrV()
		return nil
	case tskv.FieldLongV:
		m.ClearLongV()
		return nil
	case tskv.FieldDblV:
		m.ClearDblV()
		return nil
	case tskv.FieldJSONV:
		m.ClearJSONV()
		return nil
	}
	return fmt.Errorf("unknown TsKv nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TsKvMutation) ResetField(name string) error {
	switch name {
	case tskv.FieldEntityID:
		m.ResetEntityID()
		return nil
	case tskv.FieldKey:
		m.ResetKey()
		return nil
	case tskv.FieldBoolV:
		m.ResetBoolV()
		return nil
	case tskv.FieldStrV:
		m.ResetStrV()
		return nil
	case tskv.FieldLongV:
		m.ResetLongV()
		return nil
	case tskv.FieldDblV:
		m.ResetDblV()
		return nil
	case tskv.FieldJSONV:
		m.ResetJSONV()
		return nil
	case tskv.FieldTs:
		m.ResetTs()
		return nil
	}
	return fmt.Errorf("unknown TsKv field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TsKvMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TsKvMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TsKvMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TsKvMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TsKvMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TsKvMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TsKvMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TsKv unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TsKvMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TsKv edge %s", name)
}

// TsKvDictionaryMutation represents an operation that mutates the TsKvDictionary nodes in the graph.
type TsKvDictionaryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	key           *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TsKvDictionary, error)
	predicates    []predicate.TsKvDictionary
}

var _ ent.Mutation = (*TsKvDictionaryMutation)(nil)

// tskvdictionaryOption allows management of the mutation configuration using functional options.
type tskvdictionaryOption func(*TsKvDictionaryMutation)

// newTsKvDictionaryMutation creates new mutation for the TsKvDictionary entity.
func newTsKvDictionaryMutation(c config, op Op, opts ...tskvdictionaryOption) *TsKvDictionaryMutation {
	m := &TsKvDictionaryMutation{
		config:        c,
		op:            op,
		typ:           TypeTsKvDictionary,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTsKvDictionaryID sets the ID field of the mutation.
func withTsKvDictionaryID(id int) tskvdictionaryOption {
	return func(m *TsKvDictionaryMutation) {
		var (
			err   error
			once  sync.Once
			value *TsKvDictionary
		)
		m.oldValue = func(ctx context.Context) (*TsKvDictionary, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TsKvDictionary.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTsKvDictionary sets the old TsKvDictionary of the mutation.
func withTsKvDictionary(node *TsKvDictionary) tskvdictionaryOption {
	return func(m *TsKvDictionaryMutation) {
		m.oldValue = func(context.Context) (*TsKvDictionary, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TsKvDictionaryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TsKvDictionaryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TsKvDictionaryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TsKvDictionaryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TsKvDictionary.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKey sets the "key" field.
func (m *TsKvDictionaryMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *TsKvDictionaryMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the TsKvDictionary entity.
// If the TsKvDictionary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvDictionaryMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *TsKvDictionaryMutation) ResetKey() {
	m.key = nil
}

// Where appends a list predicates to the TsKvDictionaryMutation builder.
func (m *TsKvDictionaryMutation) Where(ps ...predicate.TsKvDictionary) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TsKvDictionaryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TsKvDictionary).
func (m *TsKvDictionaryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TsKvDictionaryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.key != nil {
		fields = append(fields, tskvdictionary.FieldKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TsKvDictionaryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tskvdictionary.FieldKey:
		return m.Key()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TsKvDictionaryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tskvdictionary.FieldKey:
		return m.OldKey(ctx)
	}
	return nil, fmt.Errorf("unknown TsKvDictionary field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TsKvDictionaryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tskvdictionary.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	}
	return fmt.Errorf("unknown TsKvDictionary field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TsKvDictionaryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TsKvDictionaryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TsKvDictionaryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TsKvDictionary numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TsKvDictionaryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TsKvDictionaryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TsKvDictionaryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TsKvDictionary nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TsKvDictionaryMutation) ResetField(name string) error {
	switch name {
	case tskvdictionary.FieldKey:
		m.ResetKey()
		return nil
	}
	return fmt.Errorf("unknown TsKvDictionary field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TsKvDictionaryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TsKvDictionaryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TsKvDictionaryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TsKvDictionaryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TsKvDictionaryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TsKvDictionaryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TsKvDictionaryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TsKvDictionary unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TsKvDictionaryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TsKvDictionary edge %s", name)
}

// TsKvLatestMutation represents an operation that mutates the TsKvLatest nodes in the graph.
type TsKvLatestMutation struct {
	config
	op            Op
	typ           string
	id            *int
	entity_id     *uuid.UUID
	key           *int
	addkey        *int
	bool_v        *bool
	str_v         *string
	long_v        *int64
	addlong_v     *int64
	dbl_v         *float64
	adddbl_v      *float64
	json_v        *string
	ts            *int64
	addts         *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TsKvLatest, error)
	predicates    []predicate.TsKvLatest
}

var _ ent.Mutation = (*TsKvLatestMutation)(nil)

// tskvlatestOption allows management of the mutation configuration using functional options.
type tskvlatestOption func(*TsKvLatestMutation)

// newTsKvLatestMutation creates new mutation for the TsKvLatest entity.
func newTsKvLatestMutation(c config, op Op, opts ...tskvlatestOption) *TsKvLatestMutation {
	m := &TsKvLatestMutation{
		config:        c,
		op:            op,
		typ:           TypeTsKvLatest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTsKvLatestID sets the ID field of the mutation.
func withTsKvLatestID(id int) tskvlatestOption {
	return func(m *TsKvLatestMutation) {
		var (
			err   error
			once  sync.Once
			value *TsKvLatest
		)
		m.oldValue = func(ctx context.Context) (*TsKvLatest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TsKvLatest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTsKvLatest sets the old TsKvLatest of the mutation.
func withTsKvLatest(node *TsKvLatest) tskvlatestOption {
	return func(m *TsKvLatestMutation) {
		m.oldValue = func(context.Context) (*TsKvLatest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TsKvLatestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TsKvLatestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TsKvLatestMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TsKvLatestMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TsKvLatest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEntityID sets the "entity_id" field.
func (m *TsKvLatestMutation) SetEntityID(u uuid.UUID) {
	m.entity_id = &u
}

// EntityID returns the value of the "entity_id" field in the mutation.
func (m *TsKvLatestMutation) EntityID() (r uuid.UUID, exists bool) {
	v := m.entity_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEntityID returns the old "entity_id" field's value of the TsKvLatest entity.
// If the TsKvLatest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvLatestMutation) OldEntityID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntityID: %w", err)
	}
	return oldValue.EntityID, nil
}

// ResetEntityID resets all changes to the "entity_id" field.
func (m *TsKvLatestMutation) ResetEntityID() {
	m.entity_id = nil
}

// SetKey sets the "key" field.
func (m *TsKvLatestMutation) SetKey(i int) {
	m.key = &i
	m.addkey = nil
}

// Key returns the value of the "key" field in the mutation.
func (m *TsKvLatestMutation) Key() (r int, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the TsKvLatest entity.
// If the TsKvLatest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvLatestMutation) OldKey(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// AddKey adds i to the "key" field.
func (m *TsKvLatestMutation) AddKey(i int) {
	if m.addkey != nil {
		*m.addkey += i
	} else {
		m.addkey = &i
	}
}

// AddedKey returns the value that was added to the "key" field in this mutation.
func (m *TsKvLatestMutation) AddedKey() (r int, exists bool) {
	v := m.addkey
	if v == nil {
		return
	}
	return *v, true
}

// ResetKey resets all changes to the "key" field.
func (m *TsKvLatestMutation) ResetKey() {
	m.key = nil
	m.addkey = nil
}

// SetBoolV sets the "bool_v" field.
func (m *TsKvLatestMutation) SetBoolV(b bool) {
	m.bool_v = &b
}

// BoolV returns the value of the "bool_v" field in the mutation.
func (m *TsKvLatestMutation) BoolV() (r bool, exists bool) {
	v := m.bool_v
	if v == nil {
		return
	}
	return *v, true
}

// OldBoolV returns the old "bool_v" field's value of the TsKvLatest entity.
// If the TsKvLatest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvLatestMutation) OldBoolV(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBoolV is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBoolV requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBoolV: %w", err)
	}
	return oldValue.BoolV, nil
}

// ClearBoolV clears the value of the "bool_v" field.
func (m *TsKvLatestMutation) ClearBoolV() {
	m.bool_v = nil
	m.clearedFields[tskvlatest.FieldBoolV] = struct{}{}
}

// BoolVCleared returns if the "bool_v" field was cleared in this mutation.
func (m *TsKvLatestMutation) BoolVCleared() bool {
	_, ok := m.clearedFields[tskvlatest.FieldBoolV]
	return ok
}

// ResetBoolV resets all changes to the "bool_v" field.
func (m *TsKvLatestMutation) ResetBoolV() {
	m.bool_v = nil
	delete(m.clearedFields, tskvlatest.FieldBoolV)
}

// SetStrV sets the "str_v" field.
func (m *TsKvLatestMutation) SetStrV(s string) {
	m.str_v = &s
}

// StrV returns the value of the "str_v" field in the mutation.
func (m *TsKvLatestMutation) StrV() (r string, exists bool) {
	v := m.str_v
	if v == nil {
		return
	}
	return *v, true
}

// OldStrV returns the old "str_v" field's value of the TsKvLatest entity.
// If the TsKvLatest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvLatestMutation) OldStrV(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStrV is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStrV requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStrV: %w", err)
	}
	return oldValue.StrV, nil
}

// ClearStrV clears the value of the "str_v" field.
func (m *TsKvLatestMutation) ClearStrV() {
	m.str_v = nil
	m.clearedFields[tskvlatest.FieldStrV] = struct{}{}
}

// StrVCleared returns if the "str_v" field was cleared in this mutation.
func (m *TsKvLatestMutation) StrVCleared() bool {
	_, ok := m.clearedFields[tskvlatest.FieldStrV]
	return ok
}

// ResetStrV resets all changes to the "str_v" field.
func (m *TsKvLatestMutation) ResetStrV() {
	m.str_v = nil
	delete(m.clearedFields, tskvlatest.FieldStrV)
}

// SetLongV sets the "long_v" field.
func (m *TsKvLatestMutation) SetLongV(i int64) {
	m.long_v = &i
	m.addlong_v = nil
}

// LongV returns the value of the "long_v" field in the mutation.
func (m *TsKvLatestMutation) LongV() (r int64, exists bool) {
	v := m.long_v
	if v == nil {
		return
	}
	return *v, true
}

// OldLongV returns the old "long_v" field's value of the TsKvLatest entity.
// If the TsKvLatest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvLatestMutation) OldLongV(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongV is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongV requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongV: %w", err)
	}
	return oldValue.LongV, nil
}

// AddLongV adds i to the "long_v" field.
func (m *TsKvLatestMutation) AddLongV(i int64) {
	if m.addlong_v != nil {
		*m.addlong_v += i
	} else {
		m.addlong_v = &i
	}
}

// AddedLongV returns the value that was added to the "long_v" field in this mutation.
func (m *TsKvLatestMutation) AddedLongV() (r int64, exists bool) {
	v := m.addlong_v
	if v == nil {
		return
	}
	return *v, true
}

// ClearLongV clears the value of the "long_v" field.
func (m *TsKvLatestMutation) ClearLongV() {
	m.long_v = nil
	m.addlong_v = nil
	m.clearedFields[tskvlatest.FieldLongV] = struct{}{}
}

// LongVCleared returns if the "long_v" field was cleared in this mutation.
func (m *TsKvLatestMutation) LongVCleared() bool {
	_, ok := m.clearedFields[tskvlatest.FieldLongV]
	return ok
}

// ResetLongV resets all changes to the "long_v" field.
func (m *TsKvLatestMutation) ResetLongV() {
	m.long_v = nil
	m.addlong_v = nil
	delete(m.clearedFields, tskvlatest.FieldLongV)
}

// SetDblV sets the "dbl_v" field.
func (m *TsKvLatestMutation) SetDblV(f float64) {
	m.dbl_v = &f
	m.adddbl_v = nil
}

// DblV returns the value of the "dbl_v" field in the mutation.
func (m *TsKvLatestMutation) DblV() (r float64, exists bool) {
	v := m.dbl_v
	if v == nil {
		return
	}
	return *v, true
}

// OldDblV returns the old "dbl_v" field's value of the TsKvLatest entity.
// If the TsKvLatest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvLatestMutation) OldDblV(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDblV is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDblV requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDblV: %w", err)
	}
	return oldValue.DblV, nil
}

// AddDblV adds f to the "dbl_v" field.
func (m *TsKvLatestMutation) AddDblV(f float64) {
	if m.adddbl_v != nil {
		*m.adddbl_v += f
	} else {
		m.adddbl_v = &f
	}
}

// AddedDblV returns the value that was added to the "dbl_v" field in this mutation.
func (m *TsKvLatestMutation) AddedDblV() (r float64, exists bool) {
	v := m.adddbl_v
	if v == nil {
		return
	}
	return *v, true
}

// ClearDblV clears the value of the "dbl_v" field.
func (m *TsKvLatestMutation) ClearDblV() {
	m.dbl_v = nil
	m.adddbl_v = nil
	m.clearedFields[tskvlatest.FieldDblV] = struct{}{}
}

// DblVCleared returns if the "dbl_v" field was cleared in this mutation.
func (m *TsKvLatestMutation) DblVCleared() bool {
	_, ok := m.clearedFields[tskvlatest.FieldDblV]
	return ok
}

// ResetDblV resets all changes to the "dbl_v" field.
func (m *TsKvLatestMutation) ResetDblV() {
	m.dbl_v = nil
	m.adddbl_v = nil
	delete(m.clearedFields, tskvlatest.FieldDblV)
}

// SetJSONV sets the "json_v" field.
func (m *TsKvLatestMutation) SetJSONV(s string) {
	m.json_v = &s
}

// JSONV returns the value of the "json_v" field in the mutation.
func (m *TsKvLatestMutation) JSONV() (r string, exists bool) {
	v := m.json_v
	if v == nil {
		return
	}
	return *v, true
}

// OldJSONV returns the old "json_v" field's value of the TsKvLatest entity.
// If the TsKvLatest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvLatestMutation) OldJSONV(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJSONV is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJSONV requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJSONV: %w", err)
	}
	return oldValue.JSONV, nil
}

// ClearJSONV clears the value of the "json_v" field.
func (m *TsKvLatestMutation) ClearJSONV() {
	m.json_v = nil
	m.clearedFields[tskvlatest.FieldJSONV] = struct{}{}
}

// JSONVCleared returns if the "json_v" field was cleared in this mutation.
func (m *TsKvLatestMutation) JSONVCleared() bool {
	_, ok := m.clearedFields[tskvlatest.FieldJSONV]
	return ok
}

// ResetJSONV resets all changes to the "json_v" field.
func (m *TsKvLatestMutation) ResetJSONV() {
	m.json_v = nil
	delete(m.clearedFields, tskvlatest.FieldJSONV)
}

// SetTs sets the "ts" field.
func (m *TsKvLatestMutation) SetTs(i int64) {
	m.ts = &i
	m.addts = nil
}

// Ts returns the value of the "ts" field in the mutation.
func (m *TsKvLatestMutation) Ts() (r int64, exists bool) {
	v := m.ts
	if v == nil {
		return
	}
	return *v, true
}

// OldTs returns the old "ts" field's value of the TsKvLatest entity.
// If the TsKvLatest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TsKvLatestMutation) OldTs(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTs: %w", err)
	}
	return oldValue.Ts, nil
}

// AddTs adds i to the "ts" field.
func (m *TsKvLatestMutation) AddTs(i int64) {
	if m.addts != nil {
		*m.addts += i
	} else {
		m.addts = &i
	}
}

// AddedTs returns the value that was added to the "ts" field in this mutation.
func (m *TsKvLatestMutation) AddedTs() (r int64, exists bool) {
	v := m.addts
	if v == nil {
		return
	}
	return *v, true
}

// ResetTs resets all changes to the "ts" field.
func (m *TsKvLatestMutation) ResetTs() {
	m.ts = nil
	m.addts = nil
}

// Where appends a list predicates to the TsKvLatestMutation builder.
func (m *TsKvLatestMutation) Where(ps ...predicate.TsKvLatest) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TsKvLatestMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TsKvLatest).
func (m *TsKvLatestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TsKvLatestMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.entity_id != nil {
		fields = append(fields, tskvlatest.FieldEntityID)
	}
	if m.key != nil {
		fields = append(fields, tskvlatest.FieldKey)
	}
	if m.bool_v != nil {
		fields = append(fields, tskvlatest.FieldBoolV)
	}
	if m.str_v != nil {
		fields = append(fields, tskvlatest.FieldStrV)
	}
	if m.long_v != nil {
		fields = append(fields, tskvlatest.FieldLongV)
	}
	if m.dbl_v != nil {
		fields = append(fields, tskvlatest.FieldDblV)
	}
	if m.json_v != nil {
		fields = append(fields, tskvlatest.FieldJSONV)
	}
	if m.ts != nil {
		fields = append(fields, tskvlatest.FieldTs)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TsKvLatestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tskvlatest.FieldEntityID:
		return m.EntityID()
	case tskvlatest.FieldKey:
		return m.Key()
	case tskvlatest.FieldBoolV:
		return m.BoolV()
	case tskvlatest.FieldStrV:
		return m.StrV()
	case tskvlatest.FieldLongV:
		return m.LongV()
	case tskvlatest.FieldDblV:
		return m.DblV()
	case tskvlatest.FieldJSONV:
		return m.JSONV()
	case tskvlatest.FieldTs:
		return m.Ts()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TsKvLatestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tskvlatest.FieldEntityID:
		return m.OldEntityID(ctx)
	case tskvlatest.FieldKey:
		return m.OldKey(ctx)
	case tskvlatest.FieldBoolV:
		return m.OldBoolV(ctx)
	case tskvlatest.FieldStrV:
		return m.OldStrV(ctx)
	case tskvlatest.FieldLongV:
		return m.OldLongV(ctx)
	case tskvlatest.FieldDblV:
		return m.OldDblV(ctx)
	case tskvlatest.FieldJSONV:
		return m.OldJSONV(ctx)
	case tskvlatest.FieldTs:
		return m.OldTs(ctx)
	}
	return nil, fmt.Errorf("unknown TsKvLatest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TsKvLatestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tskvlatest.FieldEntityID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntityID(v)
		return nil
	case tskvlatest.FieldKey:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case tskvlatest.FieldBoolV:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBoolV(v)
		return nil
	case tskvlatest.FieldStrV:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStrV(v)
		return nil
	case tskvlatest.FieldLongV:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongV(v)
		return nil
	case tskvlatest.FieldDblV:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDblV(v)
		return nil
	case tskvlatest.FieldJSONV:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJSONV(v)
		return nil
	case tskvlatest.FieldTs:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTs(v)
		return nil
	}
	return fmt.Errorf("unknown TsKvLatest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TsKvLatestMutation) AddedFields() []string {
	var fields []string
	if m.addkey != nil {
		fields = append(fields, tskvlatest.FieldKey)
	}
	if m.addlong_v != nil {
		fields = append(fields, tskvlatest.FieldLongV)
	}
	if m.adddbl_v != nil {
		fields = append(fields, tskvlatest.FieldDblV)
	}
	if m.addts != nil {
		fields = append(fields, tskvlatest.FieldTs)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TsKvLatestMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tskvlatest.FieldKey:
		return m.AddedKey()
	case tskvlatest.FieldLongV:
		return m.AddedLongV()
	case tskvlatest.FieldDblV:
		return m.AddedDblV()
	case tskvlatest.FieldTs:
		return m.AddedTs()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TsKvLatestMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tskvlatest.FieldKey:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddKey(v)
		return nil
	case tskvlatest.FieldLongV:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongV(v)
		return nil
	case tskvlatest.FieldDblV:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDblV(v)
		return nil
	case tskvlatest.FieldTs:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTs(v)
		return nil
	}
	return fmt.Errorf("unknown TsKvLatest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TsKvLatestMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tskvlatest.FieldBoolV) {
		fields = append(fields, tskvlatest.FieldBoolV)
	}
	if m.FieldCleared(tskvlatest.FieldStrV) {
		fields = append(fields, tskvlatest.FieldStrV)
	}
	if m.FieldCleared(tskvlatest.FieldLongV) {
		fields = append(fields, tskvlatest.FieldLongV)
	}
	if m.FieldCleared(tskvlatest.FieldDblV) {
		fields = append(fields, tskvlatest.FieldDblV)
	}
	if m.FieldCleared(tskvlatest.FieldJSONV) {
		fields = append(fields, tskvlatest.FieldJSONV)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TsKvLatestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TsKvLatestMutation) ClearField(name string) error {
	switch name {
	case tskvlatest.FieldBoolV:
		m.ClearBoolV()
		return nil
	case tskvlatest.FieldStrV:
		m.ClearStrV()
		return nil
	case tskvlatest.FieldLongV:
		m.ClearLongV()
		return nil
	case tskvlatest.FieldDblV:
		m.ClearDblV()
		return nil
	case tskvlatest.FieldJSONV:
		m.ClearJSONV()
		return nil
	}
	return fmt.Errorf("unknown TsKvLatest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TsKvLatestMutation) ResetField(name string) error {
	switch name {
	case tskvlatest.FieldEntityID:
		m.ResetEntityID()
		return nil
	case tskvlatest.FieldKey:
		m.ResetKey()
		return nil
	case tskvlatest.FieldBoolV:
		m.ResetBoolV()
		return nil
	case tskvlatest.FieldStrV:
		m.ResetStrV()
		return nil
	case tskvlatest.FieldLongV:
		m.ResetLongV()
		return nil
	case tskvlatest.FieldDblV:
		m.ResetDblV()
		return nil
	case tskvlatest.FieldJSONV:
		m.ResetJSONV()
		return nil
	case tskvlatest.FieldTs:
		m.ResetTs()
		return nil
	}
	return fmt.Errorf("unknown TsKvLatest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TsKvLatestMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TsKvLatestMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TsKvLatestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TsKvLatestMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TsKvLatestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TsKvLatestMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TsKvLatestMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TsKvLatest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TsKvLatestMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TsKvLatest edge %s", name)
}
