// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tsdb-ent-example/ent/tskv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TsKvCreate is the builder for creating a TsKv entity.
type TsKvCreate struct {
	config
	mutation *TsKvMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntityID sets the "entity_id" field.
func (tkc *TsKvCreate) SetEntityID(u uuid.UUID) *TsKvCreate {
	tkc.mutation.SetEntityID(u)
	return tkc
}

// SetKey sets the "key" field.
func (tkc *TsKvCreate) SetKey(i int) *TsKvCreate {
	tkc.mutation.SetKey(i)
	return tkc
}

// SetBoolV sets the "bool_v" field.
func (tkc *TsKvCreate) SetBoolV(b bool) *TsKvCreate {
	tkc.mutation.SetBoolV(b)
	return tkc
}

// SetNillableBoolV sets the "bool_v" field if the given value is not nil.
func (tkc *TsKvCreate) SetNillableBoolV(b *bool) *TsKvCreate {
	if b != nil {
		tkc.SetBoolV(*b)
	}
	return tkc
}

// SetStrV sets the "str_v" field.
func (tkc *TsKvCreate) SetStrV(s string) *TsKvCreate {
	tkc.mutation.SetStrV(s)
	return tkc
}

// SetNillableStrV sets the "str_v" field if the given value is not nil.
func (tkc *TsKvCreate) SetNillableStrV(s *string) *TsKvCreate {
	if s != nil {
		tkc.SetStrV(*s)
	}
	return tkc
}

// SetLongV sets the "long_v" field.
func (tkc *TsKvCreate) SetLongV(i int64) *TsKvCreate {
	tkc.mutation.SetLongV(i)
	return tkc
}

// SetNillableLongV sets the "long_v" field if the given value is not nil.
func (tkc *TsKvCreate) SetNillableLongV(i *int64) *TsKvCreate {
	if i != nil {
		tkc.SetLongV(*i)
	}
	return tkc
}

// SetDblV sets the "dbl_v" field.
func (tkc *TsKvCreate) SetDblV(f float64) *TsKvCreate {
	tkc.mutation.SetDblV(f)
	return tkc
}

// SetNillableDblV sets the "dbl_v" field if the given value is not nil.
func (tkc *TsKvCreate) SetNillableDblV(f *float64) *TsKvCreate {
	if f != nil {
		tkc.SetDblV(*f)
	}
	return tkc
}

// SetJSONV sets the "json_v" field.
func (tkc *TsKvCreate) SetJSONV(s string) *TsKvCreate {
	tkc.mutation.SetJSONV(s)
	return tkc
}

// SetNillableJSONV sets the "json_v" field if the given value is not nil.
func (tkc *TsKvCreate) SetNillableJSONV(s *string) *TsKvCreate {
	if s != nil {
		tkc.SetJSONV(*s)
	}
	return tkc
}

// SetTs sets the "ts" field.
func (tkc *TsKvCreate) SetTs(i int64) *TsKvCreate {
	tkc.mutation.SetTs(i)
	return tkc
}

// Mutation returns the TsKvMutation object of the builder.
func (tkc *TsKvCreate) Mutation() *TsKvMutation {
	return tkc.mutation
}

// Save creates the TsKv in the database.
func (tkc *TsKvCreate) Save(ctx context.Context) (*TsKv, error) {
	var (
		err  error
		node *TsKv
	)
	if len(tkc.hooks) == 0 {
		if err = tkc.check(); err != nil {
			return nil, err
		}
		node, err = tkc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TsKvMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tkc.check(); err != nil {
				return nil, err
			}
			tkc.mutation = mutation
			if node, err = tkc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tkc.hooks) - 1; i >= 0; i-- {
			if tkc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tkc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tkc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tkc *TsKvCreate) SaveX(ctx context.Context) *TsKv {
	v, err := tkc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tkc *TsKvCreate) Exec(ctx context.Context) error {
	_, err := tkc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tkc *TsKvCreate) ExecX(ctx context.Context) {
	if err := tkc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tkc *TsKvCreate) check() error {
	if _, ok := tkc.mutation.EntityID(); !ok {
		return &ValidationError{Name: "entity_id", err: errors.New(`ent: missing required field "TsKv.entity_id"`)}
	}
	if _, ok := tkc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "TsKv.key"`)}
	}
	if v, ok := tkc.mutation.StrV(); ok {
		if err := tskv.StrVValidator(v); err != nil {
			return &ValidationError{Name: "str_v", err: fmt.Errorf(`ent: validator failed for field "TsKv.str_v": %w`, err)}
		}
	}
	if _, ok := tkc.mutation.Ts(); !ok {
		return &ValidationError{Name: "ts", err: errors.New(`ent: missing required field "TsKv.ts"`)}
	}
	return nil
}

func (tkc *TsKvCreate) sqlSave(ctx context.Context) (*TsKv, error) {
	_node, _spec := tkc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tkc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tkc *TsKvCreate) createSpec() (*TsKv, *sqlgraph.CreateSpec) {
	var (
		_node = &TsKv{config: tkc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tskv.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tskv.FieldID,
			},
		}
	)
	_spec.OnConflict = tkc.conflict
	if value, ok := tkc.mutation.EntityID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: tskv.FieldEntityID,
		})
		_node.EntityID = value
	}
	if value, ok := tkc.mutation.Key(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tskv.FieldKey,
		})
		_node.Key = value
	}
	if value, ok := tkc.mutation.BoolV(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tskv.FieldBoolV,
		})
		_node.BoolV = &value
	}
	if value, ok := tkc.mutation.StrV(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tskv.FieldStrV,
		})
		_node.StrV = &value
	}
	if value, ok := tkc.mutation.LongV(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tskv.FieldLongV,
		})
		_node.LongV = &value
	}
	if value, ok := tkc.mutation.DblV(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: tskv.FieldDblV,
		})
		_node.DblV = &value
	}
	if value, ok := tkc.mutation.JSONV(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tskv.FieldJSONV,
		})
		_node.JSONV = &value
	}
	if value, ok := tkc.mutation.Ts(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tskv.FieldTs,
		})
		_node.Ts = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TsKv.Create().
//		SetEntityID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TsKvUpsert) {
//			SetEntityID(v+v).
//		}).
//		Exec(ctx)
//
func (tkc *TsKvCreate) OnConflict(opts ...sql.ConflictOption) *TsKvUpsertOne {
	tkc.conflict = opts
	return &TsKvUpsertOne{
		create: tkc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TsKv.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tkc *TsKvCreate) OnConflictColumns(columns ...string) *TsKvUpsertOne {
	tkc.conflict = append(tkc.conflict, sql.ConflictColumns(columns...))
	return &TsKvUpsertOne{
		create: tkc,
	}
}

type (
	// TsKvUpsertOne is the builder for "upsert"-ing
	//  one TsKv node.
	TsKvUpsertOne struct {
		create *TsKvCreate
	}

	// TsKvUpsert is the "OnConflict" setter.
	TsKvUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntityID sets the "entity_id" field.
func (u *TsKvUpsert) SetEntityID(v uuid.UUID) *TsKvUpsert {
	u.Set(tskv.FieldEntityID, v)
	return u
}

// UpdateEntityID sets the "entity_id" field to the value that was provided on create.
func (u *TsKvUpsert) UpdateEntityID() *TsKvUpsert {
	u.SetExcluded(tskv.FieldEntityID)
	return u
}

// SetKey sets the "key" field.
func (u *TsKvUpsert) SetKey(v int) *TsKvUpsert {
	u.Set(tskv.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *TsKvUpsert) UpdateKey() *TsKvUpsert {
	u.SetExcluded(tskv.FieldKey)
	return u
}

// AddKey adds v to the "key" field.
func (u *TsKvUpsert) AddKey(v int) *TsKvUpsert {
	u.Add(tskv.FieldKey, v)
	return u
}

// SetBoolV sets the "bool_v" field.
func (u *TsKvUpsert) SetBoolV(v bool) *TsKvUpsert {
	u.Set(tskv.FieldBoolV, v)
	return u
}

// UpdateBoolV sets the "bool_v" field to the value that was provided on create.
func (u *TsKvUpsert) UpdateBoolV() *TsKvUpsert {
	u.SetExcluded(tskv.FieldBoolV)
	return u
}

// ClearBoolV clears the value of the "bool_v" field.
func (u *TsKvUpsert) ClearBoolV() *TsKvUpsert {
	u.SetNull(tskv.FieldBoolV)
	return u
}

// SetStrV sets the "str_v" field.
func (u *TsKvUpsert) SetStrV(v string) *TsKvUpsert {
	u.Set(tskv.FieldStrV, v)
	return u
}

// UpdateStrV sets the "str_v" field to the value that was provided on create.
func (u *TsKvUpsert) UpdateStrV() *TsKvUpsert {
	u.SetExcluded(tskv.FieldStrV)
	return u
}

// ClearStrV clears the value of the "str_v" field.
func (u *TsKvUpsert) ClearStrV() *TsKvUpsert {
	u.SetNull(tskv.FieldStrV)
	return u
}

// SetLongV sets the "long_v" field.
func (u *TsKvUpsert) SetLongV(v int64) *TsKvUpsert {
	u.Set(tskv.FieldLongV, v)
	return u
}

// UpdateLongV sets the "long_v" field to the value that was provided on create.
func (u *TsKvUpsert) UpdateLongV() *TsKvUpsert {
	u.SetExcluded(tskv.FieldLongV)
	return u
}

// AddLongV adds v to the "long_v" field.
func (u *TsKvUpsert) AddLongV(v int64) *TsKvUpsert {
	u.Add(tskv.FieldLongV, v)
	return u
}

// ClearLongV clears the value of the "long_v" field.
func (u *TsKvUpsert) ClearLongV() *TsKvUpsert {
	u.SetNull(tskv.FieldLongV)
	return u
}

// SetDblV sets the "dbl_v" field.
func (u *TsKvUpsert) SetDblV(v float64) *TsKvUpsert {
	u.Set(tskv.FieldDblV, v)
	return u
}

// UpdateDblV sets the "dbl_v" field to the value that was provided on create.
func (u *TsKvUpsert) UpdateDblV() *TsKvUpsert {
	u.SetExcluded(tskv.FieldDblV)
	return u
}

// AddDblV adds v to the "dbl_v" field.
func (u *TsKvUpsert) AddDblV(v float64) *TsKvUpsert {
	u.Add(tskv.FieldDblV, v)
	return u
}

// ClearDblV clears the value of the "dbl_v" field.
func (u *TsKvUpsert) ClearDblV() *TsKvUpsert {
	u.SetNull(tskv.FieldDblV)
	return u
}

// SetJSONV sets the "json_v" field.
func (u *TsKvUpsert) SetJSONV(v string) *TsKvUpsert {
	u.Set(tskv.FieldJSONV, v)
	return u
}

// UpdateJSONV sets the "json_v" field to the value that was provided on create.
func (u *TsKvUpsert) UpdateJSONV() *TsKvUpsert {
	u.SetExcluded(tskv.FieldJSONV)
	return u
}

// ClearJSONV clears the value of the "json_v" field.
func (u *TsKvUpsert) ClearJSONV() *TsKvUpsert {
	u.SetNull(tskv.FieldJSONV)
	return u
}

// SetTs sets the "ts" field.
func (u *TsKvUpsert) SetTs(v int64) *TsKvUpsert {
	u.Set(tskv.FieldTs, v)
	return u
}

// UpdateTs sets the "ts" field to the value that was provided on create.
func (u *TsKvUpsert) UpdateTs() *TsKvUpsert {
	u.SetExcluded(tskv.FieldTs)
	return u
}

// AddTs adds v to the "ts" field.
func (u *TsKvUpsert) AddTs(v int64) *TsKvUpsert {
	u.Add(tskv.FieldTs, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TsKv.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *TsKvUpsertOne) UpdateNewValues() *TsKvUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TsKv.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TsKvUpsertOne) Ignore() *TsKvUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TsKvUpsertOne) DoNothing() *TsKvUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TsKvCreate.OnConflict
// documentation for more info.
func (u *TsKvUpsertOne) Update(set func(*TsKvUpsert)) *TsKvUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TsKvUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntityID sets the "entity_id" field.
func (u *TsKvUpsertOne) SetEntityID(v uuid.UUID) *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.SetEntityID(v)
	})
}

// UpdateEntityID sets the "entity_id" field to the value that was provided on create.
func (u *TsKvUpsertOne) UpdateEntityID() *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateEntityID()
	})
}

// SetKey sets the "key" field.
func (u *TsKvUpsertOne) SetKey(v int) *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.SetKey(v)
	})
}

// AddKey adds v to the "key" field.
func (u *TsKvUpsertOne) AddKey(v int) *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.AddKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *TsKvUpsertOne) UpdateKey() *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateKey()
	})
}

// SetBoolV sets the "bool_v" field.
func (u *TsKvUpsertOne) SetBoolV(v bool) *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.SetBoolV(v)
	})
}

// UpdateBoolV sets the "bool_v" field to the value that was provided on create.
func (u *TsKvUpsertOne) UpdateBoolV() *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateBoolV()
	})
}

// ClearBoolV clears the value of the "bool_v" field.
func (u *TsKvUpsertOne) ClearBoolV() *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.ClearBoolV()
	})
}

// SetStrV sets the "str_v" field.
func (u *TsKvUpsertOne) SetStrV(v string) *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.SetStrV(v)
	})
}

// UpdateStrV sets the "str_v" field to the value that was provided on create.
func (u *TsKvUpsertOne) UpdateStrV() *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateStrV()
	})
}

// ClearStrV clears the value of the "str_v" field.
func (u *TsKvUpsertOne) ClearStrV() *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.ClearStrV()
	})
}

// SetLongV sets the "long_v" field.
func (u *TsKvUpsertOne) SetLongV(v int64) *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.SetLongV(v)
	})
}

// AddLongV adds v to the "long_v" field.
func (u *TsKvUpsertOne) AddLongV(v int64) *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.AddLongV(v)
	})
}

// UpdateLongV sets the "long_v" field to the value that was provided on create.
func (u *TsKvUpsertOne) UpdateLongV() *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateLongV()
	})
}

// ClearLongV clears the value of the "long_v" field.
func (u *TsKvUpsertOne) ClearLongV() *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.ClearLongV()
	})
}

// SetDblV sets the "dbl_v" field.
func (u *TsKvUpsertOne) SetDblV(v float64) *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.SetDblV(v)
	})
}

// AddDblV adds v to the "dbl_v" field.
func (u *TsKvUpsertOne) AddDblV(v float64) *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.AddDblV(v)
	})
}

// UpdateDblV sets the "dbl_v" field to the value that was provided on create.
func (u *TsKvUpsertOne) UpdateDblV() *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateDblV()
	})
}

// ClearDblV clears the value of the "dbl_v" field.
func (u *TsKvUpsertOne) ClearDblV() *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.ClearDblV()
	})
}

// SetJSONV sets the "json_v" field.
func (u *TsKvUpsertOne) SetJSONV(v string) *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.SetJSONV(v)
	})
}

// UpdateJSONV sets the "json_v" field to the value that was provided on create.
func (u *TsKvUpsertOne) UpdateJSONV() *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateJSONV()
	})
}

// ClearJSONV clears the value of the "json_v" field.
func (u *TsKvUpsertOne) ClearJSONV() *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.ClearJSONV()
	})
}

// SetTs sets the "ts" field.
func (u *TsKvUpsertOne) SetTs(v int64) *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.SetTs(v)
	})
}

// AddTs adds v to the "ts" field.
func (u *TsKvUpsertOne) AddTs(v int64) *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.AddTs(v)
	})
}

// UpdateTs sets the "ts" field to the value that was provided on create.
func (u *TsKvUpsertOne) UpdateTs() *TsKvUpsertOne {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateTs()
	})
}

// Exec executes the query.
func (u *TsKvUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TsKvCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TsKvUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TsKvUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TsKvUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TsKvCreateBulk is the builder for creating many TsKv entities in bulk.
type TsKvCreateBulk struct {
	config
	builders []*TsKvCreate
	conflict []sql.ConflictOption
}

// Save creates the TsKv entities in the database.
func (tkcb *TsKvCreateBulk) Save(ctx context.Context) ([]*TsKv, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tkcb.builders))
	nodes := make([]*TsKv, len(tkcb.builders))
	mutators := make([]Mutator, len(tkcb.builders))
	for i := range tkcb.builders {
		func(i int, root context.Context) {
			builder := tkcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TsKvMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tkcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tkcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tkcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tkcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tkcb *TsKvCreateBulk) SaveX(ctx context.Context) []*TsKv {
	v, err := tkcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tkcb *TsKvCreateBulk) Exec(ctx context.Context) error {
	_, err := tkcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tkcb *TsKvCreateBulk) ExecX(ctx context.Context) {
	if err := tkcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TsKv.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TsKvUpsert) {
//			SetEntityID(v+v).
//		}).
//		Exec(ctx)
//
func (tkcb *TsKvCreateBulk) OnConflict(opts ...sql.ConflictOption) *TsKvUpsertBulk {
	tkcb.conflict = opts
	return &TsKvUpsertBulk{
		create: tkcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TsKv.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tkcb *TsKvCreateBulk) OnConflictColumns(columns ...string) *TsKvUpsertBulk {
	tkcb.conflict = append(tkcb.conflict, sql.ConflictColumns(columns...))
	return &TsKvUpsertBulk{
		create: tkcb,
	}
}

// TsKvUpsertBulk is the builder for "upsert"-ing
// a bulk of TsKv nodes.
type TsKvUpsertBulk struct {
	create *TsKvCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TsKv.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *TsKvUpsertBulk) UpdateNewValues() *TsKvUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TsKv.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TsKvUpsertBulk) Ignore() *TsKvUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TsKvUpsertBulk) DoNothing() *TsKvUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TsKvCreateBulk.OnConflict
// documentation for more info.
func (u *TsKvUpsertBulk) Update(set func(*TsKvUpsert)) *TsKvUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TsKvUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntityID sets the "entity_id" field.
func (u *TsKvUpsertBulk) SetEntityID(v uuid.UUID) *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.SetEntityID(v)
	})
}

// UpdateEntityID sets the "entity_id" field to the value that was provided on create.
func (u *TsKvUpsertBulk) UpdateEntityID() *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateEntityID()
	})
}

// SetKey sets the "key" field.
func (u *TsKvUpsertBulk) SetKey(v int) *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.SetKey(v)
	})
}

// AddKey adds v to the "key" field.
func (u *TsKvUpsertBulk) AddKey(v int) *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.AddKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *TsKvUpsertBulk) UpdateKey() *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateKey()
	})
}

// SetBoolV sets the "bool_v" field.
func (u *TsKvUpsertBulk) SetBoolV(v bool) *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.SetBoolV(v)
	})
}

// UpdateBoolV sets the "bool_v" field to the value that was provided on create.
func (u *TsKvUpsertBulk) UpdateBoolV() *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateBoolV()
	})
}

// ClearBoolV clears the value of the "bool_v" field.
func (u *TsKvUpsertBulk) ClearBoolV() *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.ClearBoolV()
	})
}

// SetStrV sets the "str_v" field.
func (u *TsKvUpsertBulk) SetStrV(v string) *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.SetStrV(v)
	})
}

// UpdateStrV sets the "str_v" field to the value that was provided on create.
func (u *TsKvUpsertBulk) UpdateStrV() *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateStrV()
	})
}

// ClearStrV clears the value of the "str_v" field.
func (u *TsKvUpsertBulk) ClearStrV() *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.ClearStrV()
	})
}

// SetLongV sets the "long_v" field.
func (u *TsKvUpsertBulk) SetLongV(v int64) *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.SetLongV(v)
	})
}

// AddLongV adds v to the "long_v" field.
func (u *TsKvUpsertBulk) AddLongV(v int64) *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.AddLongV(v)
	})
}

// UpdateLongV sets the "long_v" field to the value that was provided on create.
func (u *TsKvUpsertBulk) UpdateLongV() *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateLongV()
	})
}

// ClearLongV clears the value of the "long_v" field.
func (u *TsKvUpsertBulk) ClearLongV() *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.ClearLongV()
	})
}

// SetDblV sets the "dbl_v" field.
func (u *TsKvUpsertBulk) SetDblV(v float64) *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.SetDblV(v)
	})
}

// AddDblV adds v to the "dbl_v" field.
func (u *TsKvUpsertBulk) AddDblV(v float64) *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.AddDblV(v)
	})
}

// UpdateDblV sets the "dbl_v" field to the value that was provided on create.
func (u *TsKvUpsertBulk) UpdateDblV() *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateDblV()
	})
}

// ClearDblV clears the value of the "dbl_v" field.
func (u *TsKvUpsertBulk) ClearDblV() *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.ClearDblV()
	})
}

// SetJSONV sets the "json_v" field.
func (u *TsKvUpsertBulk) SetJSONV(v string) *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.SetJSONV(v)
	})
}

// UpdateJSONV sets the "json_v" field to the value that was provided on create.
func (u *TsKvUpsertBulk) UpdateJSONV() *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateJSONV()
	})
}

// ClearJSONV clears the value of the "json_v" field.
func (u *TsKvUpsertBulk) ClearJSONV() *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.ClearJSONV()
	})
}

// SetTs sets the "ts" field.
func (u *TsKvUpsertBulk) SetTs(v int64) *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.SetTs(v)
	})
}

// AddTs adds v to the "ts" field.
func (u *TsKvUpsertBulk) AddTs(v int64) *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.AddTs(v)
	})
}

// UpdateTs sets the "ts" field to the value that was provided on create.
func (u *TsKvUpsertBulk) UpdateTs() *TsKvUpsertBulk {
	return u.Update(func(s *TsKvUpsert) {
		s.UpdateTs()
	})
}

// Exec executes the query.
func (u *TsKvUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TsKvCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TsKvCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TsKvUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
