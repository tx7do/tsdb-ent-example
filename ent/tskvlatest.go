// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"tsdb-ent-example/ent/tskvlatest"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TsKvLatest is the model entity for the TsKvLatest schema.
type TsKvLatest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	// 实体ID
	EntityID uuid.UUID `json:"entity_id,omitempty"`
	// Key holds the value of the "key" field.
	// 键ID
	Key int `json:"key,omitempty"`
	// BoolV holds the value of the "bool_v" field.
	// BOOL值
	BoolV *bool `json:"bool_v,omitempty"`
	// StrV holds the value of the "str_v" field.
	// STRING值
	StrV *string `json:"str_v,omitempty"`
	// LongV holds the value of the "long_v" field.
	// LONG值
	LongV *int64 `json:"long_v,omitempty"`
	// DblV holds the value of the "dbl_v" field.
	// DOUBLE值
	DblV *float64 `json:"dbl_v,omitempty"`
	// JSONV holds the value of the "json_v" field.
	// JSON值
	JSONV *string `json:"json_v,omitempty"`
	// Ts holds the value of the "ts" field.
	// 最后更新的时间戳
	Ts int64 `json:"ts,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TsKvLatest) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tskvlatest.FieldBoolV:
			values[i] = new(sql.NullBool)
		case tskvlatest.FieldDblV:
			values[i] = new(sql.NullFloat64)
		case tskvlatest.FieldID, tskvlatest.FieldKey, tskvlatest.FieldLongV, tskvlatest.FieldTs:
			values[i] = new(sql.NullInt64)
		case tskvlatest.FieldStrV, tskvlatest.FieldJSONV:
			values[i] = new(sql.NullString)
		case tskvlatest.FieldEntityID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TsKvLatest", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TsKvLatest fields.
func (tkl *TsKvLatest) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tskvlatest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tkl.ID = int(value.Int64)
		case tskvlatest.FieldEntityID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value != nil {
				tkl.EntityID = *value
			}
		case tskvlatest.FieldKey:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				tkl.Key = int(value.Int64)
			}
		case tskvlatest.FieldBoolV:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field bool_v", values[i])
			} else if value.Valid {
				tkl.BoolV = new(bool)
				*tkl.BoolV = value.Bool
			}
		case tskvlatest.FieldStrV:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field str_v", values[i])
			} else if value.Valid {
				tkl.StrV = new(string)
				*tkl.StrV = value.String
			}
		case tskvlatest.FieldLongV:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field long_v", values[i])
			} else if value.Valid {
				tkl.LongV = new(int64)
				*tkl.LongV = value.Int64
			}
		case tskvlatest.FieldDblV:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field dbl_v", values[i])
			} else if value.Valid {
				tkl.DblV = new(float64)
				*tkl.DblV = value.Float64
			}
		case tskvlatest.FieldJSONV:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field json_v", values[i])
			} else if value.Valid {
				tkl.JSONV = new(string)
				*tkl.JSONV = value.String
			}
		case tskvlatest.FieldTs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ts", values[i])
			} else if value.Valid {
				tkl.Ts = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TsKvLatest.
// Note that you need to call TsKvLatest.Unwrap() before calling this method if this TsKvLatest
// was returned from a transaction, and the transaction was committed or rolled back.
func (tkl *TsKvLatest) Update() *TsKvLatestUpdateOne {
	return (&TsKvLatestClient{config: tkl.config}).UpdateOne(tkl)
}

// Unwrap unwraps the TsKvLatest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tkl *TsKvLatest) Unwrap() *TsKvLatest {
	tx, ok := tkl.config.driver.(*txDriver)
	if !ok {
		panic("ent: TsKvLatest is not a transactional entity")
	}
	tkl.config.driver = tx.drv
	return tkl
}

// String implements the fmt.Stringer.
func (tkl *TsKvLatest) String() string {
	var builder strings.Builder
	builder.WriteString("TsKvLatest(")
	builder.WriteString(fmt.Sprintf("id=%v", tkl.ID))
	builder.WriteString(", entity_id=")
	builder.WriteString(fmt.Sprintf("%v", tkl.EntityID))
	builder.WriteString(", key=")
	builder.WriteString(fmt.Sprintf("%v", tkl.Key))
	if v := tkl.BoolV; v != nil {
		builder.WriteString(", bool_v=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := tkl.StrV; v != nil {
		builder.WriteString(", str_v=")
		builder.WriteString(*v)
	}
	if v := tkl.LongV; v != nil {
		builder.WriteString(", long_v=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := tkl.DblV; v != nil {
		builder.WriteString(", dbl_v=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := tkl.JSONV; v != nil {
		builder.WriteString(", json_v=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ts=")
	builder.WriteString(fmt.Sprintf("%v", tkl.Ts))
	builder.WriteByte(')')
	return builder.String()
}

// TsKvLatests is a parsable slice of TsKvLatest.
type TsKvLatests []*TsKvLatest

func (tkl TsKvLatests) config(cfg config) {
	for _i := range tkl {
		tkl[_i].config = cfg
	}
}
