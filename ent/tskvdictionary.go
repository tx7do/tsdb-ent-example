// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"tsdb-ent-example/ent/tskvdictionary"

	"entgo.io/ent/dialect/sql"
)

// TsKvDictionary is the model entity for the TsKvDictionary schema.
type TsKvDictionary struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	// 键名
	Key string `json:"key,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TsKvDictionary) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tskvdictionary.FieldID:
			values[i] = new(sql.NullInt64)
		case tskvdictionary.FieldKey:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TsKvDictionary", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TsKvDictionary fields.
func (tkd *TsKvDictionary) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tskvdictionary.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tkd.ID = int(value.Int64)
		case tskvdictionary.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				tkd.Key = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TsKvDictionary.
// Note that you need to call TsKvDictionary.Unwrap() before calling this method if this TsKvDictionary
// was returned from a transaction, and the transaction was committed or rolled back.
func (tkd *TsKvDictionary) Update() *TsKvDictionaryUpdateOne {
	return (&TsKvDictionaryClient{config: tkd.config}).UpdateOne(tkd)
}

// Unwrap unwraps the TsKvDictionary entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tkd *TsKvDictionary) Unwrap() *TsKvDictionary {
	tx, ok := tkd.config.driver.(*txDriver)
	if !ok {
		panic("ent: TsKvDictionary is not a transactional entity")
	}
	tkd.config.driver = tx.drv
	return tkd
}

// String implements the fmt.Stringer.
func (tkd *TsKvDictionary) String() string {
	var builder strings.Builder
	builder.WriteString("TsKvDictionary(")
	builder.WriteString(fmt.Sprintf("id=%v", tkd.ID))
	builder.WriteString(", key=")
	builder.WriteString(tkd.Key)
	builder.WriteByte(')')
	return builder.String()
}

// TsKvDictionaries is a parsable slice of TsKvDictionary.
type TsKvDictionaries []*TsKvDictionary

func (tkd TsKvDictionaries) config(cfg config) {
	for _i := range tkd {
		tkd[_i].config = cfg
	}
}
