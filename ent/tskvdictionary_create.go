// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tsdb-ent-example/ent/tskvdictionary"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TsKvDictionaryCreate is the builder for creating a TsKvDictionary entity.
type TsKvDictionaryCreate struct {
	config
	mutation *TsKvDictionaryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetKey sets the "key" field.
func (tkdc *TsKvDictionaryCreate) SetKey(s string) *TsKvDictionaryCreate {
	tkdc.mutation.SetKey(s)
	return tkdc
}

// Mutation returns the TsKvDictionaryMutation object of the builder.
func (tkdc *TsKvDictionaryCreate) Mutation() *TsKvDictionaryMutation {
	return tkdc.mutation
}

// Save creates the TsKvDictionary in the database.
func (tkdc *TsKvDictionaryCreate) Save(ctx context.Context) (*TsKvDictionary, error) {
	var (
		err  error
		node *TsKvDictionary
	)
	if len(tkdc.hooks) == 0 {
		if err = tkdc.check(); err != nil {
			return nil, err
		}
		node, err = tkdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TsKvDictionaryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tkdc.check(); err != nil {
				return nil, err
			}
			tkdc.mutation = mutation
			if node, err = tkdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tkdc.hooks) - 1; i >= 0; i-- {
			if tkdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tkdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tkdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tkdc *TsKvDictionaryCreate) SaveX(ctx context.Context) *TsKvDictionary {
	v, err := tkdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tkdc *TsKvDictionaryCreate) Exec(ctx context.Context) error {
	_, err := tkdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tkdc *TsKvDictionaryCreate) ExecX(ctx context.Context) {
	if err := tkdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tkdc *TsKvDictionaryCreate) check() error {
	if _, ok := tkdc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "TsKvDictionary.key"`)}
	}
	if v, ok := tkdc.mutation.Key(); ok {
		if err := tskvdictionary.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "TsKvDictionary.key": %w`, err)}
		}
	}
	return nil
}

func (tkdc *TsKvDictionaryCreate) sqlSave(ctx context.Context) (*TsKvDictionary, error) {
	_node, _spec := tkdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tkdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tkdc *TsKvDictionaryCreate) createSpec() (*TsKvDictionary, *sqlgraph.CreateSpec) {
	var (
		_node = &TsKvDictionary{config: tkdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tskvdictionary.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tskvdictionary.FieldID,
			},
		}
	)
	_spec.OnConflict = tkdc.conflict
	if value, ok := tkdc.mutation.Key(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tskvdictionary.FieldKey,
		})
		_node.Key = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TsKvDictionary.Create().
//		SetKey(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TsKvDictionaryUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
//
func (tkdc *TsKvDictionaryCreate) OnConflict(opts ...sql.ConflictOption) *TsKvDictionaryUpsertOne {
	tkdc.conflict = opts
	return &TsKvDictionaryUpsertOne{
		create: tkdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TsKvDictionary.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tkdc *TsKvDictionaryCreate) OnConflictColumns(columns ...string) *TsKvDictionaryUpsertOne {
	tkdc.conflict = append(tkdc.conflict, sql.ConflictColumns(columns...))
	return &TsKvDictionaryUpsertOne{
		create: tkdc,
	}
}

type (
	// TsKvDictionaryUpsertOne is the builder for "upsert"-ing
	//  one TsKvDictionary node.
	TsKvDictionaryUpsertOne struct {
		create *TsKvDictionaryCreate
	}

	// TsKvDictionaryUpsert is the "OnConflict" setter.
	TsKvDictionaryUpsert struct {
		*sql.UpdateSet
	}
)

// SetKey sets the "key" field.
func (u *TsKvDictionaryUpsert) SetKey(v string) *TsKvDictionaryUpsert {
	u.Set(tskvdictionary.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *TsKvDictionaryUpsert) UpdateKey() *TsKvDictionaryUpsert {
	u.SetExcluded(tskvdictionary.FieldKey)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TsKvDictionary.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *TsKvDictionaryUpsertOne) UpdateNewValues() *TsKvDictionaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TsKvDictionary.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TsKvDictionaryUpsertOne) Ignore() *TsKvDictionaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TsKvDictionaryUpsertOne) DoNothing() *TsKvDictionaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TsKvDictionaryCreate.OnConflict
// documentation for more info.
func (u *TsKvDictionaryUpsertOne) Update(set func(*TsKvDictionaryUpsert)) *TsKvDictionaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TsKvDictionaryUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *TsKvDictionaryUpsertOne) SetKey(v string) *TsKvDictionaryUpsertOne {
	return u.Update(func(s *TsKvDictionaryUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *TsKvDictionaryUpsertOne) UpdateKey() *TsKvDictionaryUpsertOne {
	return u.Update(func(s *TsKvDictionaryUpsert) {
		s.UpdateKey()
	})
}

// Exec executes the query.
func (u *TsKvDictionaryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TsKvDictionaryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TsKvDictionaryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TsKvDictionaryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TsKvDictionaryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TsKvDictionaryCreateBulk is the builder for creating many TsKvDictionary entities in bulk.
type TsKvDictionaryCreateBulk struct {
	config
	builders []*TsKvDictionaryCreate
	conflict []sql.ConflictOption
}

// Save creates the TsKvDictionary entities in the database.
func (tkdcb *TsKvDictionaryCreateBulk) Save(ctx context.Context) ([]*TsKvDictionary, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tkdcb.builders))
	nodes := make([]*TsKvDictionary, len(tkdcb.builders))
	mutators := make([]Mutator, len(tkdcb.builders))
	for i := range tkdcb.builders {
		func(i int, root context.Context) {
			builder := tkdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TsKvDictionaryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tkdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tkdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tkdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tkdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tkdcb *TsKvDictionaryCreateBulk) SaveX(ctx context.Context) []*TsKvDictionary {
	v, err := tkdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tkdcb *TsKvDictionaryCreateBulk) Exec(ctx context.Context) error {
	_, err := tkdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tkdcb *TsKvDictionaryCreateBulk) ExecX(ctx context.Context) {
	if err := tkdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TsKvDictionary.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TsKvDictionaryUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
//
func (tkdcb *TsKvDictionaryCreateBulk) OnConflict(opts ...sql.ConflictOption) *TsKvDictionaryUpsertBulk {
	tkdcb.conflict = opts
	return &TsKvDictionaryUpsertBulk{
		create: tkdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TsKvDictionary.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tkdcb *TsKvDictionaryCreateBulk) OnConflictColumns(columns ...string) *TsKvDictionaryUpsertBulk {
	tkdcb.conflict = append(tkdcb.conflict, sql.ConflictColumns(columns...))
	return &TsKvDictionaryUpsertBulk{
		create: tkdcb,
	}
}

// TsKvDictionaryUpsertBulk is the builder for "upsert"-ing
// a bulk of TsKvDictionary nodes.
type TsKvDictionaryUpsertBulk struct {
	create *TsKvDictionaryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TsKvDictionary.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *TsKvDictionaryUpsertBulk) UpdateNewValues() *TsKvDictionaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TsKvDictionary.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TsKvDictionaryUpsertBulk) Ignore() *TsKvDictionaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TsKvDictionaryUpsertBulk) DoNothing() *TsKvDictionaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TsKvDictionaryCreateBulk.OnConflict
// documentation for more info.
func (u *TsKvDictionaryUpsertBulk) Update(set func(*TsKvDictionaryUpsert)) *TsKvDictionaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TsKvDictionaryUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *TsKvDictionaryUpsertBulk) SetKey(v string) *TsKvDictionaryUpsertBulk {
	return u.Update(func(s *TsKvDictionaryUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *TsKvDictionaryUpsertBulk) UpdateKey() *TsKvDictionaryUpsertBulk {
	return u.Update(func(s *TsKvDictionaryUpsert) {
		s.UpdateKey()
	})
}

// Exec executes the query.
func (u *TsKvDictionaryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TsKvDictionaryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TsKvDictionaryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TsKvDictionaryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
