// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AttributeKvColumns holds the columns for the "attribute_kv" table.
	AttributeKvColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "entity_type", Type: field.TypeString, Size: 255},
		{Name: "entity_id", Type: field.TypeUUID},
		{Name: "attribute_type", Type: field.TypeString, Size: 255},
		{Name: "attribute_key", Type: field.TypeString, Size: 255},
		{Name: "bool_v", Type: field.TypeBool, Nullable: true},
		{Name: "str_v", Type: field.TypeString, Nullable: true, Size: 10000000},
		{Name: "long_v", Type: field.TypeInt64, Nullable: true},
		{Name: "dbl_v", Type: field.TypeFloat64, Nullable: true},
		{Name: "json_v", Type: field.TypeString, Nullable: true},
		{Name: "last_update_ts", Type: field.TypeInt64},
	}
	// AttributeKvTable holds the schema information for the "attribute_kv" table.
	AttributeKvTable = &schema.Table{
		Name:       "attribute_kv",
		Columns:    AttributeKvColumns,
		PrimaryKey: []*schema.Column{AttributeKvColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "attribute_kv_pkey",
				Unique:  false,
				Columns: []*schema.Column{AttributeKvColumns[1], AttributeKvColumns[2], AttributeKvColumns[3], AttributeKvColumns[4]},
			},
			{
				Name:    "idx_attribute_kv_by_key_and_last_update_ts",
				Unique:  false,
				Columns: []*schema.Column{AttributeKvColumns[2], AttributeKvColumns[4], AttributeKvColumns[10]},
			},
		},
	}
	// SensorsColumns holds the columns for the "sensors" table.
	SensorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeString, Size: 50, Default: ""},
		{Name: "location", Type: field.TypeString, Size: 50, Default: ""},
	}
	// SensorsTable holds the schema information for the "sensors" table.
	SensorsTable = &schema.Table{
		Name:       "sensors",
		Columns:    SensorsColumns,
		PrimaryKey: []*schema.Column{SensorsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "sensor_pkey",
				Unique:  false,
				Columns: []*schema.Column{SensorsColumns[0]},
			},
		},
	}
	// SensorDataColumns holds the columns for the "sensor_data" table.
	SensorDataColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "time", Type: field.TypeTime, Nullable: true},
		{Name: "sensor_id", Type: field.TypeInt},
		{Name: "temperature", Type: field.TypeFloat64},
		{Name: "cpu", Type: field.TypeFloat64},
	}
	// SensorDataTable holds the schema information for the "sensor_data" table.
	SensorDataTable = &schema.Table{
		Name:       "sensor_data",
		Columns:    SensorDataColumns,
		PrimaryKey: []*schema.Column{SensorDataColumns[0]},
	}
	// TsKvColumns holds the columns for the "ts_kv" table.
	TsKvColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "entity_id", Type: field.TypeUUID},
		{Name: "key", Type: field.TypeInt},
		{Name: "bool_v", Type: field.TypeBool, Nullable: true},
		{Name: "str_v", Type: field.TypeString, Nullable: true, Size: 10000000},
		{Name: "long_v", Type: field.TypeInt64, Nullable: true},
		{Name: "dbl_v", Type: field.TypeFloat64, Nullable: true},
		{Name: "json_v", Type: field.TypeString, Nullable: true},
		{Name: "ts", Type: field.TypeInt64},
	}
	// TsKvTable holds the schema information for the "ts_kv" table.
	TsKvTable = &schema.Table{
		Name:       "ts_kv",
		Columns:    TsKvColumns,
		PrimaryKey: []*schema.Column{TsKvColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "ts_kv_pkey",
				Unique:  false,
				Columns: []*schema.Column{TsKvColumns[1], TsKvColumns[2], TsKvColumns[8]},
			},
		},
	}
	// TsKvDictionaryColumns holds the columns for the "ts_kv_dictionary" table.
	TsKvDictionaryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "key", Type: field.TypeString, Size: 255},
	}
	// TsKvDictionaryTable holds the schema information for the "ts_kv_dictionary" table.
	TsKvDictionaryTable = &schema.Table{
		Name:       "ts_kv_dictionary",
		Columns:    TsKvDictionaryColumns,
		PrimaryKey: []*schema.Column{TsKvDictionaryColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "ts_key_id_pkey",
				Unique:  false,
				Columns: []*schema.Column{TsKvDictionaryColumns[1]},
			},
		},
	}
	// TsKvLatestColumns holds the columns for the "ts_kv_latest" table.
	TsKvLatestColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "entity_id", Type: field.TypeUUID},
		{Name: "key", Type: field.TypeInt},
		{Name: "bool_v", Type: field.TypeBool, Nullable: true},
		{Name: "str_v", Type: field.TypeString, Nullable: true, Size: 10000000},
		{Name: "long_v", Type: field.TypeInt64, Nullable: true},
		{Name: "dbl_v", Type: field.TypeFloat64, Nullable: true},
		{Name: "json_v", Type: field.TypeString, Nullable: true},
		{Name: "ts", Type: field.TypeInt64},
	}
	// TsKvLatestTable holds the schema information for the "ts_kv_latest" table.
	TsKvLatestTable = &schema.Table{
		Name:       "ts_kv_latest",
		Columns:    TsKvLatestColumns,
		PrimaryKey: []*schema.Column{TsKvLatestColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "ts_kv_latest_pkey",
				Unique:  false,
				Columns: []*schema.Column{TsKvLatestColumns[1], TsKvLatestColumns[2]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AttributeKvTable,
		SensorsTable,
		SensorDataTable,
		TsKvTable,
		TsKvDictionaryTable,
		TsKvLatestTable,
	}
)

func init() {
	AttributeKvTable.Annotation = &entsql.Annotation{
		Table:     "attribute_kv",
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
	SensorsTable.Annotation = &entsql.Annotation{
		Table:     "sensors",
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
	SensorDataTable.Annotation = &entsql.Annotation{
		Table:     "sensor_data",
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
	TsKvTable.Annotation = &entsql.Annotation{
		Table:     "ts_kv",
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
	TsKvDictionaryTable.Annotation = &entsql.Annotation{
		Table:     "ts_kv_dictionary",
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
	TsKvLatestTable.Annotation = &entsql.Annotation{
		Table:     "ts_kv_latest",
		Charset:   "utf8mb4",
		Collation: "utf8mb4_bin",
	}
}
