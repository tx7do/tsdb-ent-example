// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"tsdb-ent-example/ent/attributekv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AttributeKVCreate is the builder for creating a AttributeKV entity.
type AttributeKVCreate struct {
	config
	mutation *AttributeKVMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntityType sets the "entity_type" field.
func (akc *AttributeKVCreate) SetEntityType(s string) *AttributeKVCreate {
	akc.mutation.SetEntityType(s)
	return akc
}

// SetEntityID sets the "entity_id" field.
func (akc *AttributeKVCreate) SetEntityID(u uuid.UUID) *AttributeKVCreate {
	akc.mutation.SetEntityID(u)
	return akc
}

// SetAttributeType sets the "attribute_type" field.
func (akc *AttributeKVCreate) SetAttributeType(s string) *AttributeKVCreate {
	akc.mutation.SetAttributeType(s)
	return akc
}

// SetAttributeKey sets the "attribute_key" field.
func (akc *AttributeKVCreate) SetAttributeKey(s string) *AttributeKVCreate {
	akc.mutation.SetAttributeKey(s)
	return akc
}

// SetBoolV sets the "bool_v" field.
func (akc *AttributeKVCreate) SetBoolV(b bool) *AttributeKVCreate {
	akc.mutation.SetBoolV(b)
	return akc
}

// SetNillableBoolV sets the "bool_v" field if the given value is not nil.
func (akc *AttributeKVCreate) SetNillableBoolV(b *bool) *AttributeKVCreate {
	if b != nil {
		akc.SetBoolV(*b)
	}
	return akc
}

// SetStrV sets the "str_v" field.
func (akc *AttributeKVCreate) SetStrV(s string) *AttributeKVCreate {
	akc.mutation.SetStrV(s)
	return akc
}

// SetNillableStrV sets the "str_v" field if the given value is not nil.
func (akc *AttributeKVCreate) SetNillableStrV(s *string) *AttributeKVCreate {
	if s != nil {
		akc.SetStrV(*s)
	}
	return akc
}

// SetLongV sets the "long_v" field.
func (akc *AttributeKVCreate) SetLongV(i int64) *AttributeKVCreate {
	akc.mutation.SetLongV(i)
	return akc
}

// SetNillableLongV sets the "long_v" field if the given value is not nil.
func (akc *AttributeKVCreate) SetNillableLongV(i *int64) *AttributeKVCreate {
	if i != nil {
		akc.SetLongV(*i)
	}
	return akc
}

// SetDblV sets the "dbl_v" field.
func (akc *AttributeKVCreate) SetDblV(f float64) *AttributeKVCreate {
	akc.mutation.SetDblV(f)
	return akc
}

// SetNillableDblV sets the "dbl_v" field if the given value is not nil.
func (akc *AttributeKVCreate) SetNillableDblV(f *float64) *AttributeKVCreate {
	if f != nil {
		akc.SetDblV(*f)
	}
	return akc
}

// SetJSONV sets the "json_v" field.
func (akc *AttributeKVCreate) SetJSONV(s string) *AttributeKVCreate {
	akc.mutation.SetJSONV(s)
	return akc
}

// SetNillableJSONV sets the "json_v" field if the given value is not nil.
func (akc *AttributeKVCreate) SetNillableJSONV(s *string) *AttributeKVCreate {
	if s != nil {
		akc.SetJSONV(*s)
	}
	return akc
}

// SetLastUpdateTs sets the "last_update_ts" field.
func (akc *AttributeKVCreate) SetLastUpdateTs(i int64) *AttributeKVCreate {
	akc.mutation.SetLastUpdateTs(i)
	return akc
}

// Mutation returns the AttributeKVMutation object of the builder.
func (akc *AttributeKVCreate) Mutation() *AttributeKVMutation {
	return akc.mutation
}

// Save creates the AttributeKV in the database.
func (akc *AttributeKVCreate) Save(ctx context.Context) (*AttributeKV, error) {
	var (
		err  error
		node *AttributeKV
	)
	if len(akc.hooks) == 0 {
		if err = akc.check(); err != nil {
			return nil, err
		}
		node, err = akc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttributeKVMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = akc.check(); err != nil {
				return nil, err
			}
			akc.mutation = mutation
			if node, err = akc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(akc.hooks) - 1; i >= 0; i-- {
			if akc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = akc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, akc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (akc *AttributeKVCreate) SaveX(ctx context.Context) *AttributeKV {
	v, err := akc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (akc *AttributeKVCreate) Exec(ctx context.Context) error {
	_, err := akc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akc *AttributeKVCreate) ExecX(ctx context.Context) {
	if err := akc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (akc *AttributeKVCreate) check() error {
	if _, ok := akc.mutation.EntityType(); !ok {
		return &ValidationError{Name: "entity_type", err: errors.New(`ent: missing required field "AttributeKV.entity_type"`)}
	}
	if v, ok := akc.mutation.EntityType(); ok {
		if err := attributekv.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "AttributeKV.entity_type": %w`, err)}
		}
	}
	if _, ok := akc.mutation.EntityID(); !ok {
		return &ValidationError{Name: "entity_id", err: errors.New(`ent: missing required field "AttributeKV.entity_id"`)}
	}
	if _, ok := akc.mutation.AttributeType(); !ok {
		return &ValidationError{Name: "attribute_type", err: errors.New(`ent: missing required field "AttributeKV.attribute_type"`)}
	}
	if v, ok := akc.mutation.AttributeType(); ok {
		if err := attributekv.AttributeTypeValidator(v); err != nil {
			return &ValidationError{Name: "attribute_type", err: fmt.Errorf(`ent: validator failed for field "AttributeKV.attribute_type": %w`, err)}
		}
	}
	if _, ok := akc.mutation.AttributeKey(); !ok {
		return &ValidationError{Name: "attribute_key", err: errors.New(`ent: missing required field "AttributeKV.attribute_key"`)}
	}
	if v, ok := akc.mutation.AttributeKey(); ok {
		if err := attributekv.AttributeKeyValidator(v); err != nil {
			return &ValidationError{Name: "attribute_key", err: fmt.Errorf(`ent: validator failed for field "AttributeKV.attribute_key": %w`, err)}
		}
	}
	if v, ok := akc.mutation.StrV(); ok {
		if err := attributekv.StrVValidator(v); err != nil {
			return &ValidationError{Name: "str_v", err: fmt.Errorf(`ent: validator failed for field "AttributeKV.str_v": %w`, err)}
		}
	}
	if _, ok := akc.mutation.LastUpdateTs(); !ok {
		return &ValidationError{Name: "last_update_ts", err: errors.New(`ent: missing required field "AttributeKV.last_update_ts"`)}
	}
	return nil
}

func (akc *AttributeKVCreate) sqlSave(ctx context.Context) (*AttributeKV, error) {
	_node, _spec := akc.createSpec()
	if err := sqlgraph.CreateNode(ctx, akc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (akc *AttributeKVCreate) createSpec() (*AttributeKV, *sqlgraph.CreateSpec) {
	var (
		_node = &AttributeKV{config: akc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: attributekv.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: attributekv.FieldID,
			},
		}
	)
	_spec.OnConflict = akc.conflict
	if value, ok := akc.mutation.EntityType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attributekv.FieldEntityType,
		})
		_node.EntityType = value
	}
	if value, ok := akc.mutation.EntityID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: attributekv.FieldEntityID,
		})
		_node.EntityID = value
	}
	if value, ok := akc.mutation.AttributeType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attributekv.FieldAttributeType,
		})
		_node.AttributeType = value
	}
	if value, ok := akc.mutation.AttributeKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attributekv.FieldAttributeKey,
		})
		_node.AttributeKey = value
	}
	if value, ok := akc.mutation.BoolV(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: attributekv.FieldBoolV,
		})
		_node.BoolV = &value
	}
	if value, ok := akc.mutation.StrV(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attributekv.FieldStrV,
		})
		_node.StrV = &value
	}
	if value, ok := akc.mutation.LongV(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: attributekv.FieldLongV,
		})
		_node.LongV = &value
	}
	if value, ok := akc.mutation.DblV(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attributekv.FieldDblV,
		})
		_node.DblV = &value
	}
	if value, ok := akc.mutation.JSONV(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attributekv.FieldJSONV,
		})
		_node.JSONV = &value
	}
	if value, ok := akc.mutation.LastUpdateTs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: attributekv.FieldLastUpdateTs,
		})
		_node.LastUpdateTs = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AttributeKV.Create().
//		SetEntityType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttributeKVUpsert) {
//			SetEntityType(v+v).
//		}).
//		Exec(ctx)
//
func (akc *AttributeKVCreate) OnConflict(opts ...sql.ConflictOption) *AttributeKVUpsertOne {
	akc.conflict = opts
	return &AttributeKVUpsertOne{
		create: akc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AttributeKV.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (akc *AttributeKVCreate) OnConflictColumns(columns ...string) *AttributeKVUpsertOne {
	akc.conflict = append(akc.conflict, sql.ConflictColumns(columns...))
	return &AttributeKVUpsertOne{
		create: akc,
	}
}

type (
	// AttributeKVUpsertOne is the builder for "upsert"-ing
	//  one AttributeKV node.
	AttributeKVUpsertOne struct {
		create *AttributeKVCreate
	}

	// AttributeKVUpsert is the "OnConflict" setter.
	AttributeKVUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntityType sets the "entity_type" field.
func (u *AttributeKVUpsert) SetEntityType(v string) *AttributeKVUpsert {
	u.Set(attributekv.FieldEntityType, v)
	return u
}

// UpdateEntityType sets the "entity_type" field to the value that was provided on create.
func (u *AttributeKVUpsert) UpdateEntityType() *AttributeKVUpsert {
	u.SetExcluded(attributekv.FieldEntityType)
	return u
}

// SetEntityID sets the "entity_id" field.
func (u *AttributeKVUpsert) SetEntityID(v uuid.UUID) *AttributeKVUpsert {
	u.Set(attributekv.FieldEntityID, v)
	return u
}

// UpdateEntityID sets the "entity_id" field to the value that was provided on create.
func (u *AttributeKVUpsert) UpdateEntityID() *AttributeKVUpsert {
	u.SetExcluded(attributekv.FieldEntityID)
	return u
}

// SetAttributeType sets the "attribute_type" field.
func (u *AttributeKVUpsert) SetAttributeType(v string) *AttributeKVUpsert {
	u.Set(attributekv.FieldAttributeType, v)
	return u
}

// UpdateAttributeType sets the "attribute_type" field to the value that was provided on create.
func (u *AttributeKVUpsert) UpdateAttributeType() *AttributeKVUpsert {
	u.SetExcluded(attributekv.FieldAttributeType)
	return u
}

// SetAttributeKey sets the "attribute_key" field.
func (u *AttributeKVUpsert) SetAttributeKey(v string) *AttributeKVUpsert {
	u.Set(attributekv.FieldAttributeKey, v)
	return u
}

// UpdateAttributeKey sets the "attribute_key" field to the value that was provided on create.
func (u *AttributeKVUpsert) UpdateAttributeKey() *AttributeKVUpsert {
	u.SetExcluded(attributekv.FieldAttributeKey)
	return u
}

// SetBoolV sets the "bool_v" field.
func (u *AttributeKVUpsert) SetBoolV(v bool) *AttributeKVUpsert {
	u.Set(attributekv.FieldBoolV, v)
	return u
}

// UpdateBoolV sets the "bool_v" field to the value that was provided on create.
func (u *AttributeKVUpsert) UpdateBoolV() *AttributeKVUpsert {
	u.SetExcluded(attributekv.FieldBoolV)
	return u
}

// ClearBoolV clears the value of the "bool_v" field.
func (u *AttributeKVUpsert) ClearBoolV() *AttributeKVUpsert {
	u.SetNull(attributekv.FieldBoolV)
	return u
}

// SetStrV sets the "str_v" field.
func (u *AttributeKVUpsert) SetStrV(v string) *AttributeKVUpsert {
	u.Set(attributekv.FieldStrV, v)
	return u
}

// UpdateStrV sets the "str_v" field to the value that was provided on create.
func (u *AttributeKVUpsert) UpdateStrV() *AttributeKVUpsert {
	u.SetExcluded(attributekv.FieldStrV)
	return u
}

// ClearStrV clears the value of the "str_v" field.
func (u *AttributeKVUpsert) ClearStrV() *AttributeKVUpsert {
	u.SetNull(attributekv.FieldStrV)
	return u
}

// SetLongV sets the "long_v" field.
func (u *AttributeKVUpsert) SetLongV(v int64) *AttributeKVUpsert {
	u.Set(attributekv.FieldLongV, v)
	return u
}

// UpdateLongV sets the "long_v" field to the value that was provided on create.
func (u *AttributeKVUpsert) UpdateLongV() *AttributeKVUpsert {
	u.SetExcluded(attributekv.FieldLongV)
	return u
}

// AddLongV adds v to the "long_v" field.
func (u *AttributeKVUpsert) AddLongV(v int64) *AttributeKVUpsert {
	u.Add(attributekv.FieldLongV, v)
	return u
}

// ClearLongV clears the value of the "long_v" field.
func (u *AttributeKVUpsert) ClearLongV() *AttributeKVUpsert {
	u.SetNull(attributekv.FieldLongV)
	return u
}

// SetDblV sets the "dbl_v" field.
func (u *AttributeKVUpsert) SetDblV(v float64) *AttributeKVUpsert {
	u.Set(attributekv.FieldDblV, v)
	return u
}

// UpdateDblV sets the "dbl_v" field to the value that was provided on create.
func (u *AttributeKVUpsert) UpdateDblV() *AttributeKVUpsert {
	u.SetExcluded(attributekv.FieldDblV)
	return u
}

// AddDblV adds v to the "dbl_v" field.
func (u *AttributeKVUpsert) AddDblV(v float64) *AttributeKVUpsert {
	u.Add(attributekv.FieldDblV, v)
	return u
}

// ClearDblV clears the value of the "dbl_v" field.
func (u *AttributeKVUpsert) ClearDblV() *AttributeKVUpsert {
	u.SetNull(attributekv.FieldDblV)
	return u
}

// SetJSONV sets the "json_v" field.
func (u *AttributeKVUpsert) SetJSONV(v string) *AttributeKVUpsert {
	u.Set(attributekv.FieldJSONV, v)
	return u
}

// UpdateJSONV sets the "json_v" field to the value that was provided on create.
func (u *AttributeKVUpsert) UpdateJSONV() *AttributeKVUpsert {
	u.SetExcluded(attributekv.FieldJSONV)
	return u
}

// ClearJSONV clears the value of the "json_v" field.
func (u *AttributeKVUpsert) ClearJSONV() *AttributeKVUpsert {
	u.SetNull(attributekv.FieldJSONV)
	return u
}

// SetLastUpdateTs sets the "last_update_ts" field.
func (u *AttributeKVUpsert) SetLastUpdateTs(v int64) *AttributeKVUpsert {
	u.Set(attributekv.FieldLastUpdateTs, v)
	return u
}

// UpdateLastUpdateTs sets the "last_update_ts" field to the value that was provided on create.
func (u *AttributeKVUpsert) UpdateLastUpdateTs() *AttributeKVUpsert {
	u.SetExcluded(attributekv.FieldLastUpdateTs)
	return u
}

// AddLastUpdateTs adds v to the "last_update_ts" field.
func (u *AttributeKVUpsert) AddLastUpdateTs(v int64) *AttributeKVUpsert {
	u.Add(attributekv.FieldLastUpdateTs, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AttributeKV.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *AttributeKVUpsertOne) UpdateNewValues() *AttributeKVUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AttributeKV.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AttributeKVUpsertOne) Ignore() *AttributeKVUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttributeKVUpsertOne) DoNothing() *AttributeKVUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttributeKVCreate.OnConflict
// documentation for more info.
func (u *AttributeKVUpsertOne) Update(set func(*AttributeKVUpsert)) *AttributeKVUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttributeKVUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntityType sets the "entity_type" field.
func (u *AttributeKVUpsertOne) SetEntityType(v string) *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetEntityType(v)
	})
}

// UpdateEntityType sets the "entity_type" field to the value that was provided on create.
func (u *AttributeKVUpsertOne) UpdateEntityType() *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateEntityType()
	})
}

// SetEntityID sets the "entity_id" field.
func (u *AttributeKVUpsertOne) SetEntityID(v uuid.UUID) *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetEntityID(v)
	})
}

// UpdateEntityID sets the "entity_id" field to the value that was provided on create.
func (u *AttributeKVUpsertOne) UpdateEntityID() *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateEntityID()
	})
}

// SetAttributeType sets the "attribute_type" field.
func (u *AttributeKVUpsertOne) SetAttributeType(v string) *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetAttributeType(v)
	})
}

// UpdateAttributeType sets the "attribute_type" field to the value that was provided on create.
func (u *AttributeKVUpsertOne) UpdateAttributeType() *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateAttributeType()
	})
}

// SetAttributeKey sets the "attribute_key" field.
func (u *AttributeKVUpsertOne) SetAttributeKey(v string) *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetAttributeKey(v)
	})
}

// UpdateAttributeKey sets the "attribute_key" field to the value that was provided on create.
func (u *AttributeKVUpsertOne) UpdateAttributeKey() *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateAttributeKey()
	})
}

// SetBoolV sets the "bool_v" field.
func (u *AttributeKVUpsertOne) SetBoolV(v bool) *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetBoolV(v)
	})
}

// UpdateBoolV sets the "bool_v" field to the value that was provided on create.
func (u *AttributeKVUpsertOne) UpdateBoolV() *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateBoolV()
	})
}

// ClearBoolV clears the value of the "bool_v" field.
func (u *AttributeKVUpsertOne) ClearBoolV() *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.ClearBoolV()
	})
}

// SetStrV sets the "str_v" field.
func (u *AttributeKVUpsertOne) SetStrV(v string) *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetStrV(v)
	})
}

// UpdateStrV sets the "str_v" field to the value that was provided on create.
func (u *AttributeKVUpsertOne) UpdateStrV() *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateStrV()
	})
}

// ClearStrV clears the value of the "str_v" field.
func (u *AttributeKVUpsertOne) ClearStrV() *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.ClearStrV()
	})
}

// SetLongV sets the "long_v" field.
func (u *AttributeKVUpsertOne) SetLongV(v int64) *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetLongV(v)
	})
}

// AddLongV adds v to the "long_v" field.
func (u *AttributeKVUpsertOne) AddLongV(v int64) *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.AddLongV(v)
	})
}

// UpdateLongV sets the "long_v" field to the value that was provided on create.
func (u *AttributeKVUpsertOne) UpdateLongV() *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateLongV()
	})
}

// ClearLongV clears the value of the "long_v" field.
func (u *AttributeKVUpsertOne) ClearLongV() *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.ClearLongV()
	})
}

// SetDblV sets the "dbl_v" field.
func (u *AttributeKVUpsertOne) SetDblV(v float64) *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetDblV(v)
	})
}

// AddDblV adds v to the "dbl_v" field.
func (u *AttributeKVUpsertOne) AddDblV(v float64) *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.AddDblV(v)
	})
}

// UpdateDblV sets the "dbl_v" field to the value that was provided on create.
func (u *AttributeKVUpsertOne) UpdateDblV() *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateDblV()
	})
}

// ClearDblV clears the value of the "dbl_v" field.
func (u *AttributeKVUpsertOne) ClearDblV() *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.ClearDblV()
	})
}

// SetJSONV sets the "json_v" field.
func (u *AttributeKVUpsertOne) SetJSONV(v string) *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetJSONV(v)
	})
}

// UpdateJSONV sets the "json_v" field to the value that was provided on create.
func (u *AttributeKVUpsertOne) UpdateJSONV() *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateJSONV()
	})
}

// ClearJSONV clears the value of the "json_v" field.
func (u *AttributeKVUpsertOne) ClearJSONV() *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.ClearJSONV()
	})
}

// SetLastUpdateTs sets the "last_update_ts" field.
func (u *AttributeKVUpsertOne) SetLastUpdateTs(v int64) *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetLastUpdateTs(v)
	})
}

// AddLastUpdateTs adds v to the "last_update_ts" field.
func (u *AttributeKVUpsertOne) AddLastUpdateTs(v int64) *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.AddLastUpdateTs(v)
	})
}

// UpdateLastUpdateTs sets the "last_update_ts" field to the value that was provided on create.
func (u *AttributeKVUpsertOne) UpdateLastUpdateTs() *AttributeKVUpsertOne {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateLastUpdateTs()
	})
}

// Exec executes the query.
func (u *AttributeKVUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AttributeKVCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttributeKVUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AttributeKVUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AttributeKVUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AttributeKVCreateBulk is the builder for creating many AttributeKV entities in bulk.
type AttributeKVCreateBulk struct {
	config
	builders []*AttributeKVCreate
	conflict []sql.ConflictOption
}

// Save creates the AttributeKV entities in the database.
func (akcb *AttributeKVCreateBulk) Save(ctx context.Context) ([]*AttributeKV, error) {
	specs := make([]*sqlgraph.CreateSpec, len(akcb.builders))
	nodes := make([]*AttributeKV, len(akcb.builders))
	mutators := make([]Mutator, len(akcb.builders))
	for i := range akcb.builders {
		func(i int, root context.Context) {
			builder := akcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttributeKVMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, akcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = akcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, akcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, akcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (akcb *AttributeKVCreateBulk) SaveX(ctx context.Context) []*AttributeKV {
	v, err := akcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (akcb *AttributeKVCreateBulk) Exec(ctx context.Context) error {
	_, err := akcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akcb *AttributeKVCreateBulk) ExecX(ctx context.Context) {
	if err := akcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AttributeKV.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttributeKVUpsert) {
//			SetEntityType(v+v).
//		}).
//		Exec(ctx)
//
func (akcb *AttributeKVCreateBulk) OnConflict(opts ...sql.ConflictOption) *AttributeKVUpsertBulk {
	akcb.conflict = opts
	return &AttributeKVUpsertBulk{
		create: akcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AttributeKV.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (akcb *AttributeKVCreateBulk) OnConflictColumns(columns ...string) *AttributeKVUpsertBulk {
	akcb.conflict = append(akcb.conflict, sql.ConflictColumns(columns...))
	return &AttributeKVUpsertBulk{
		create: akcb,
	}
}

// AttributeKVUpsertBulk is the builder for "upsert"-ing
// a bulk of AttributeKV nodes.
type AttributeKVUpsertBulk struct {
	create *AttributeKVCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AttributeKV.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *AttributeKVUpsertBulk) UpdateNewValues() *AttributeKVUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AttributeKV.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AttributeKVUpsertBulk) Ignore() *AttributeKVUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttributeKVUpsertBulk) DoNothing() *AttributeKVUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttributeKVCreateBulk.OnConflict
// documentation for more info.
func (u *AttributeKVUpsertBulk) Update(set func(*AttributeKVUpsert)) *AttributeKVUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttributeKVUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntityType sets the "entity_type" field.
func (u *AttributeKVUpsertBulk) SetEntityType(v string) *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetEntityType(v)
	})
}

// UpdateEntityType sets the "entity_type" field to the value that was provided on create.
func (u *AttributeKVUpsertBulk) UpdateEntityType() *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateEntityType()
	})
}

// SetEntityID sets the "entity_id" field.
func (u *AttributeKVUpsertBulk) SetEntityID(v uuid.UUID) *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetEntityID(v)
	})
}

// UpdateEntityID sets the "entity_id" field to the value that was provided on create.
func (u *AttributeKVUpsertBulk) UpdateEntityID() *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateEntityID()
	})
}

// SetAttributeType sets the "attribute_type" field.
func (u *AttributeKVUpsertBulk) SetAttributeType(v string) *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetAttributeType(v)
	})
}

// UpdateAttributeType sets the "attribute_type" field to the value that was provided on create.
func (u *AttributeKVUpsertBulk) UpdateAttributeType() *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateAttributeType()
	})
}

// SetAttributeKey sets the "attribute_key" field.
func (u *AttributeKVUpsertBulk) SetAttributeKey(v string) *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetAttributeKey(v)
	})
}

// UpdateAttributeKey sets the "attribute_key" field to the value that was provided on create.
func (u *AttributeKVUpsertBulk) UpdateAttributeKey() *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateAttributeKey()
	})
}

// SetBoolV sets the "bool_v" field.
func (u *AttributeKVUpsertBulk) SetBoolV(v bool) *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetBoolV(v)
	})
}

// UpdateBoolV sets the "bool_v" field to the value that was provided on create.
func (u *AttributeKVUpsertBulk) UpdateBoolV() *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateBoolV()
	})
}

// ClearBoolV clears the value of the "bool_v" field.
func (u *AttributeKVUpsertBulk) ClearBoolV() *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.ClearBoolV()
	})
}

// SetStrV sets the "str_v" field.
func (u *AttributeKVUpsertBulk) SetStrV(v string) *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetStrV(v)
	})
}

// UpdateStrV sets the "str_v" field to the value that was provided on create.
func (u *AttributeKVUpsertBulk) UpdateStrV() *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateStrV()
	})
}

// ClearStrV clears the value of the "str_v" field.
func (u *AttributeKVUpsertBulk) ClearStrV() *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.ClearStrV()
	})
}

// SetLongV sets the "long_v" field.
func (u *AttributeKVUpsertBulk) SetLongV(v int64) *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetLongV(v)
	})
}

// AddLongV adds v to the "long_v" field.
func (u *AttributeKVUpsertBulk) AddLongV(v int64) *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.AddLongV(v)
	})
}

// UpdateLongV sets the "long_v" field to the value that was provided on create.
func (u *AttributeKVUpsertBulk) UpdateLongV() *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateLongV()
	})
}

// ClearLongV clears the value of the "long_v" field.
func (u *AttributeKVUpsertBulk) ClearLongV() *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.ClearLongV()
	})
}

// SetDblV sets the "dbl_v" field.
func (u *AttributeKVUpsertBulk) SetDblV(v float64) *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetDblV(v)
	})
}

// AddDblV adds v to the "dbl_v" field.
func (u *AttributeKVUpsertBulk) AddDblV(v float64) *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.AddDblV(v)
	})
}

// UpdateDblV sets the "dbl_v" field to the value that was provided on create.
func (u *AttributeKVUpsertBulk) UpdateDblV() *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateDblV()
	})
}

// ClearDblV clears the value of the "dbl_v" field.
func (u *AttributeKVUpsertBulk) ClearDblV() *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.ClearDblV()
	})
}

// SetJSONV sets the "json_v" field.
func (u *AttributeKVUpsertBulk) SetJSONV(v string) *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetJSONV(v)
	})
}

// UpdateJSONV sets the "json_v" field to the value that was provided on create.
func (u *AttributeKVUpsertBulk) UpdateJSONV() *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateJSONV()
	})
}

// ClearJSONV clears the value of the "json_v" field.
func (u *AttributeKVUpsertBulk) ClearJSONV() *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.ClearJSONV()
	})
}

// SetLastUpdateTs sets the "last_update_ts" field.
func (u *AttributeKVUpsertBulk) SetLastUpdateTs(v int64) *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.SetLastUpdateTs(v)
	})
}

// AddLastUpdateTs adds v to the "last_update_ts" field.
func (u *AttributeKVUpsertBulk) AddLastUpdateTs(v int64) *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.AddLastUpdateTs(v)
	})
}

// UpdateLastUpdateTs sets the "last_update_ts" field to the value that was provided on create.
func (u *AttributeKVUpsertBulk) UpdateLastUpdateTs() *AttributeKVUpsertBulk {
	return u.Update(func(s *AttributeKVUpsert) {
		s.UpdateLastUpdateTs()
	})
}

// Exec executes the query.
func (u *AttributeKVUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AttributeKVCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AttributeKVCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttributeKVUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
